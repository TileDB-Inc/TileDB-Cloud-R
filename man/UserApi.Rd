% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/user_api.R
\docType{class}
\name{UserApi}
\alias{UserApi}
\title{User operations}
\format{
An \code{R6Class} generator object
}
\description{
tiledbcloud.User
}
\section{Methods}{

\describe{
\strong{ AddAWSAccessCredentials } \emph{  }
Add aws keys

\itemize{
\item \emph{ @param } namespace character
\item \emph{ @param } aws.access.credentials \link{AWSAccessCredentials}


\item status code : 204 | AWS keys added successfully


\item response headers :

\tabular{ll}{
}
\item status code : 0 | error response

\item return type : Error 
\item response headers :

\tabular{ll}{
}
}

\strong{ AddUserToOrganization } \emph{  }
add a user to an organization

\itemize{
\item \emph{ @param } organization character
\item \emph{ @param } user \link{OrganizationUser}


\item status code : 204 | user added to organization successfully


\item response headers :

\tabular{ll}{
}
\item status code : 0 | error response

\item return type : Error 
\item response headers :

\tabular{ll}{
}
}

\strong{ CheckAWSAccessCredentials } \emph{  }
Check if aws keys are set

\itemize{
\item \emph{ @param } namespace character
\item \emph{ @returnType } list( \link{AWSAccessCredentials} ) \cr


\item status code : 200 | AWS keys are set

\item return type : array[AWSAccessCredentials] 
\item response headers :

\tabular{ll}{
}
\item status code : 0 | error response

\item return type : Error 
\item response headers :

\tabular{ll}{
}
}

\strong{ CheckAWSAccessCredentialsByName } \emph{  }
Check if aws keys are set by name

\itemize{
\item \emph{ @param } namespace character
\item \emph{ @param } name character
\item \emph{ @returnType } \link{AWSAccessCredentials} \cr


\item status code : 200 | AWS keys are set

\item return type : AWSAccessCredentials 
\item response headers :

\tabular{ll}{
}
\item status code : 0 | error response

\item return type : Error 
\item response headers :

\tabular{ll}{
}
}

\strong{ ConfirmEmail } \emph{  }
confirm user email

\itemize{


\item status code : 204 | User email confirmed successfully


\item response headers :

\tabular{ll}{
}
\item status code : 0 | error response

\item return type : Error 
\item response headers :

\tabular{ll}{
}
}

\strong{ CreateUser } \emph{  }
create a user

\itemize{
\item \emph{ @param } user \link{User}


\item status code : 204 | user created successfully


\item response headers :

\tabular{ll}{
}
\item status code : 0 | error response

\item return type : Error 
\item response headers :

\tabular{ll}{
}
}

\strong{ DeleteAWSAccessCredentials } \emph{  }
delete a AWS Access credentials in a namespace. This will likely cause arrays to become unreachable

\itemize{
\item \emph{ @param } namespace character
\item \emph{ @param } name character


\item status code : 204 | AWS credentials deleted


\item response headers :

\tabular{ll}{
}
\item status code : 0 | error response

\item return type : Error 
\item response headers :

\tabular{ll}{
}
}

\strong{ DeleteUser } \emph{  }
delete a user

\itemize{
\item \emph{ @param } username character


\item status code : 204 | user deleted


\item response headers :

\tabular{ll}{
}
\item status code : 0 | error response

\item return type : Error 
\item response headers :

\tabular{ll}{
}
}

\strong{ DeleteUserFromOrganization } \emph{  }
delete a user from an organization

\itemize{
\item \emph{ @param } organization character
\item \emph{ @param } username character


\item status code : 204 | user delete from organization successfully


\item response headers :

\tabular{ll}{
}
\item status code : 0 | error response

\item return type : Error 
\item response headers :

\tabular{ll}{
}
}

\strong{ GetOrganizationUser } \emph{  }
get a user from an organization

\itemize{
\item \emph{ @param } organization character
\item \emph{ @param } username character
\item \emph{ @returnType } \link{OrganizationUser} \cr


\item status code : 200 | user from organization

\item return type : OrganizationUser 
\item response headers :

\tabular{ll}{
}
\item status code : 404 | User is not in organization


\item response headers :

\tabular{ll}{
}
\item status code : 0 | error response

\item return type : Error 
\item response headers :

\tabular{ll}{
}
}

\strong{ GetSession } \emph{  }
Get session token for user

\itemize{
\item \emph{ @param } remember.me character
\item \emph{ @returnType } \link{Token} \cr


\item status code : 200 | Session token

\item return type : Token 
\item response headers :

\tabular{ll}{
}
\item status code : 0 | error response

\item return type : Error 
\item response headers :

\tabular{ll}{
}
}

\strong{ GetTokenScopes } \emph{  }
retrieves available token scopes for a user

\itemize{
\item \emph{ @returnType } list( \link{TokenScope} ) \cr


\item status code : 200 | available token scopes

\item return type : array[TokenScope] 
\item response headers :

\tabular{ll}{
}
\item status code : 0 | error response

\item return type : Error 
\item response headers :

\tabular{ll}{
}
}

\strong{ GetUser } \emph{  }
get a user

\itemize{
\item \emph{ @returnType } \link{User} \cr


\item status code : 200 | user details

\item return type : User 
\item response headers :

\tabular{ll}{
}
\item status code : 0 | error response

\item return type : Error 
\item response headers :

\tabular{ll}{
}
}

\strong{ GetUserWithUsername } \emph{  }
get a user

\itemize{
\item \emph{ @param } username character
\item \emph{ @returnType } \link{User} \cr


\item status code : 200 | user details

\item return type : User 
\item response headers :

\tabular{ll}{
}
\item status code : 404 | User does not exist


\item response headers :

\tabular{ll}{
}
\item status code : 0 | error response

\item return type : Error 
\item response headers :

\tabular{ll}{
}
}

\strong{ RequestToken } \emph{  }
Request an authorization token, optionally taken a TokenRequest object to set parameters on the token

\itemize{
\item \emph{ @param } token.request \link{TokenRequest}
\item \emph{ @returnType } \link{Token} \cr


\item status code : 200 | token

\item return type : Token 
\item response headers :

\tabular{ll}{
}
\item status code : 0 | error response

\item return type : Error 
\item response headers :

\tabular{ll}{
}
}

\strong{ ResetUserPassword } \emph{  }
reset user password

\itemize{
\item \emph{ @param } user \link{InlineObject}


\item status code : 204 | User password updated successfully


\item response headers :

\tabular{ll}{
}
\item status code : 404 | User not found


\item response headers :

\tabular{ll}{
}
\item status code : 0 | error response

\item return type : Error 
\item response headers :

\tabular{ll}{
}
}

\strong{ RevokeToken } \emph{  }
revoke an authorization token

\itemize{
\item \emph{ @param } token character


\item status code : 204 | revokation successfully


\item response headers :

\tabular{ll}{
}
\item status code : 0 | error response

\item return type : Error 
\item response headers :

\tabular{ll}{
}
}

\strong{ TokensGet } \emph{  }
Fetch a list of user tokens

\itemize{
\item \emph{ @returnType } list( \link{Token} ) \cr


\item status code : 200 | Array of user created non-session tokens

\item return type : array[Token] 
\item response headers :

\tabular{ll}{
}
\item status code : 0 | error response

\item return type : Error 
\item response headers :

\tabular{ll}{
}
}

\strong{ TokensSessionGet } \emph{  }
Fetch a list of user session tokens

\itemize{
\item \emph{ @returnType } list( \link{Token} ) \cr


\item status code : 200 | Array of user created session tokens

\item return type : array[Token] 
\item response headers :

\tabular{ll}{
}
\item status code : 0 | error response

\item return type : Error 
\item response headers :

\tabular{ll}{
}
}

\strong{ UpdateAWSAccessCredentials } \emph{  }
Update aws keys or associated buckets. This will update the key associations for each array in the namespace

\itemize{
\item \emph{ @param } namespace character
\item \emph{ @param } name character
\item \emph{ @param } aws.access.credentials \link{AWSAccessCredentials}


\item status code : 204 | AWS keys updated successfully


\item response headers :

\tabular{ll}{
}
\item status code : 0 | error response

\item return type : Error 
\item response headers :

\tabular{ll}{
}
}

\strong{ UpdateUser } \emph{  }
update a user

\itemize{
\item \emph{ @param } username character
\item \emph{ @param } user \link{User}


\item status code : 204 | user updated successfully


\item response headers :

\tabular{ll}{
}
\item status code : 0 | error response

\item return type : Error 
\item response headers :

\tabular{ll}{
}
}

\strong{ UpdateUserInOrganization } \emph{  }
update a user in an organization

\itemize{
\item \emph{ @param } organization character
\item \emph{ @param } username character
\item \emph{ @param } user \link{OrganizationUser}


\item status code : 204 | user update in organization successfully


\item response headers :

\tabular{ll}{
}
\item status code : 0 | error response

\item return type : Error 
\item response headers :

\tabular{ll}{
}
}

}
}

\examples{
\dontrun{
####################  AddAWSAccessCredentials  ####################

library(tiledbcloud)
var.namespace <- 'namespace_example' # character | namespace
var.aws.access.credentials <- AWSAccessCredentials$new() # AWSAccessCredentials | aws access credentials to store for a namespace

api.instance <- UserApi$new()

#Configure API key authorization: ApiKeyAuth
api.instance$apiClient$apiKeys['X-TILEDB-REST-API-KEY'] <- 'TODO_YOUR_API_KEY';

#Configure HTTP basic authorization: BasicAuth
# provide your username in the user-serial format
api.instance$apiClient$username <- '<user-serial>'; 
# provide your api key generated using the developer portal
api.instance$apiClient$password <- '<api_key>';

result <- api.instance$AddAWSAccessCredentials(var.namespace, var.aws.access.credentials)


####################  AddUserToOrganization  ####################

library(tiledbcloud)
var.organization <- 'organization_example' # character | organization name
var.user <- OrganizationUser$new() # OrganizationUser | user to add

api.instance <- UserApi$new()

#Configure API key authorization: ApiKeyAuth
api.instance$apiClient$apiKeys['X-TILEDB-REST-API-KEY'] <- 'TODO_YOUR_API_KEY';

#Configure HTTP basic authorization: BasicAuth
# provide your username in the user-serial format
api.instance$apiClient$username <- '<user-serial>'; 
# provide your api key generated using the developer portal
api.instance$apiClient$password <- '<api_key>';

result <- api.instance$AddUserToOrganization(var.organization, var.user)


####################  CheckAWSAccessCredentials  ####################

library(tiledbcloud)
var.namespace <- 'namespace_example' # character | namespace

api.instance <- UserApi$new()

#Configure API key authorization: ApiKeyAuth
api.instance$apiClient$apiKeys['X-TILEDB-REST-API-KEY'] <- 'TODO_YOUR_API_KEY';

#Configure HTTP basic authorization: BasicAuth
# provide your username in the user-serial format
api.instance$apiClient$username <- '<user-serial>'; 
# provide your api key generated using the developer portal
api.instance$apiClient$password <- '<api_key>';

result <- api.instance$CheckAWSAccessCredentials(var.namespace)


####################  CheckAWSAccessCredentialsByName  ####################

library(tiledbcloud)
var.namespace <- 'namespace_example' # character | namespace
var.name <- 'name_example' # character | name

api.instance <- UserApi$new()

#Configure API key authorization: ApiKeyAuth
api.instance$apiClient$apiKeys['X-TILEDB-REST-API-KEY'] <- 'TODO_YOUR_API_KEY';

#Configure HTTP basic authorization: BasicAuth
# provide your username in the user-serial format
api.instance$apiClient$username <- '<user-serial>'; 
# provide your api key generated using the developer portal
api.instance$apiClient$password <- '<api_key>';

result <- api.instance$CheckAWSAccessCredentialsByName(var.namespace, var.name)


####################  ConfirmEmail  ####################

library(tiledbcloud)

api.instance <- UserApi$new()

#Configure API key authorization: ApiKeyAuth
api.instance$apiClient$apiKeys['X-TILEDB-REST-API-KEY'] <- 'TODO_YOUR_API_KEY';

#Configure HTTP basic authorization: BasicAuth
# provide your username in the user-serial format
api.instance$apiClient$username <- '<user-serial>'; 
# provide your api key generated using the developer portal
api.instance$apiClient$password <- '<api_key>';

result <- api.instance$ConfirmEmail()


####################  CreateUser  ####################

library(tiledbcloud)
var.user <- User$new() # User | user to create

api.instance <- UserApi$new()

#Configure API key authorization: ApiKeyAuth
api.instance$apiClient$apiKeys['X-TILEDB-REST-API-KEY'] <- 'TODO_YOUR_API_KEY';

#Configure HTTP basic authorization: BasicAuth
# provide your username in the user-serial format
api.instance$apiClient$username <- '<user-serial>'; 
# provide your api key generated using the developer portal
api.instance$apiClient$password <- '<api_key>';

result <- api.instance$CreateUser(var.user)


####################  DeleteAWSAccessCredentials  ####################

library(tiledbcloud)
var.namespace <- 'namespace_example' # character | namespace
var.name <- 'name_example' # character | name

api.instance <- UserApi$new()

#Configure API key authorization: ApiKeyAuth
api.instance$apiClient$apiKeys['X-TILEDB-REST-API-KEY'] <- 'TODO_YOUR_API_KEY';

#Configure HTTP basic authorization: BasicAuth
# provide your username in the user-serial format
api.instance$apiClient$username <- '<user-serial>'; 
# provide your api key generated using the developer portal
api.instance$apiClient$password <- '<api_key>';

result <- api.instance$DeleteAWSAccessCredentials(var.namespace, var.name)


####################  DeleteUser  ####################

library(tiledbcloud)
var.username <- 'username_example' # character | username or ID

api.instance <- UserApi$new()

#Configure API key authorization: ApiKeyAuth
api.instance$apiClient$apiKeys['X-TILEDB-REST-API-KEY'] <- 'TODO_YOUR_API_KEY';

#Configure HTTP basic authorization: BasicAuth
# provide your username in the user-serial format
api.instance$apiClient$username <- '<user-serial>'; 
# provide your api key generated using the developer portal
api.instance$apiClient$password <- '<api_key>';

result <- api.instance$DeleteUser(var.username)


####################  DeleteUserFromOrganization  ####################

library(tiledbcloud)
var.organization <- 'organization_example' # character | organization name
var.username <- 'username_example' # character | username to manipulate

api.instance <- UserApi$new()

#Configure API key authorization: ApiKeyAuth
api.instance$apiClient$apiKeys['X-TILEDB-REST-API-KEY'] <- 'TODO_YOUR_API_KEY';

#Configure HTTP basic authorization: BasicAuth
# provide your username in the user-serial format
api.instance$apiClient$username <- '<user-serial>'; 
# provide your api key generated using the developer portal
api.instance$apiClient$password <- '<api_key>';

result <- api.instance$DeleteUserFromOrganization(var.organization, var.username)


####################  GetOrganizationUser  ####################

library(tiledbcloud)
var.organization <- 'organization_example' # character | organization name
var.username <- 'username_example' # character | username to manipulate

api.instance <- UserApi$new()

#Configure API key authorization: ApiKeyAuth
api.instance$apiClient$apiKeys['X-TILEDB-REST-API-KEY'] <- 'TODO_YOUR_API_KEY';

#Configure HTTP basic authorization: BasicAuth
# provide your username in the user-serial format
api.instance$apiClient$username <- '<user-serial>'; 
# provide your api key generated using the developer portal
api.instance$apiClient$password <- '<api_key>';

result <- api.instance$GetOrganizationUser(var.organization, var.username)


####################  GetSession  ####################

library(tiledbcloud)
var.remember.me <- 'remember.me_example' # character | flag to create a token with expiration of 30 days, default is false

api.instance <- UserApi$new()

#Configure API key authorization: ApiKeyAuth
api.instance$apiClient$apiKeys['X-TILEDB-REST-API-KEY'] <- 'TODO_YOUR_API_KEY';

#Configure HTTP basic authorization: BasicAuth
# provide your username in the user-serial format
api.instance$apiClient$username <- '<user-serial>'; 
# provide your api key generated using the developer portal
api.instance$apiClient$password <- '<api_key>';

result <- api.instance$GetSession(remember.me=var.remember.me)


####################  GetTokenScopes  ####################

library(tiledbcloud)

api.instance <- UserApi$new()

#Configure API key authorization: ApiKeyAuth
api.instance$apiClient$apiKeys['X-TILEDB-REST-API-KEY'] <- 'TODO_YOUR_API_KEY';

#Configure HTTP basic authorization: BasicAuth
# provide your username in the user-serial format
api.instance$apiClient$username <- '<user-serial>'; 
# provide your api key generated using the developer portal
api.instance$apiClient$password <- '<api_key>';

result <- api.instance$GetTokenScopes()


####################  GetUser  ####################

library(tiledbcloud)

api.instance <- UserApi$new()

#Configure API key authorization: ApiKeyAuth
api.instance$apiClient$apiKeys['X-TILEDB-REST-API-KEY'] <- 'TODO_YOUR_API_KEY';

#Configure HTTP basic authorization: BasicAuth
# provide your username in the user-serial format
api.instance$apiClient$username <- '<user-serial>'; 
# provide your api key generated using the developer portal
api.instance$apiClient$password <- '<api_key>';

result <- api.instance$GetUser()


####################  GetUserWithUsername  ####################

library(tiledbcloud)
var.username <- 'username_example' # character | username or ID

api.instance <- UserApi$new()

#Configure API key authorization: ApiKeyAuth
api.instance$apiClient$apiKeys['X-TILEDB-REST-API-KEY'] <- 'TODO_YOUR_API_KEY';

#Configure HTTP basic authorization: BasicAuth
# provide your username in the user-serial format
api.instance$apiClient$username <- '<user-serial>'; 
# provide your api key generated using the developer portal
api.instance$apiClient$password <- '<api_key>';

result <- api.instance$GetUserWithUsername(var.username)


####################  RequestToken  ####################

library(tiledbcloud)
var.token.request <- TokenRequest$new() # TokenRequest | token request object

api.instance <- UserApi$new()

#Configure API key authorization: ApiKeyAuth
api.instance$apiClient$apiKeys['X-TILEDB-REST-API-KEY'] <- 'TODO_YOUR_API_KEY';

#Configure HTTP basic authorization: BasicAuth
# provide your username in the user-serial format
api.instance$apiClient$username <- '<user-serial>'; 
# provide your api key generated using the developer portal
api.instance$apiClient$password <- '<api_key>';

result <- api.instance$RequestToken(token.request=var.token.request)


####################  ResetUserPassword  ####################

library(tiledbcloud)
var.user <- InlineObject$new() # InlineObject | 

api.instance <- UserApi$new()

#Configure API key authorization: ApiKeyAuth
api.instance$apiClient$apiKeys['X-TILEDB-REST-API-KEY'] <- 'TODO_YOUR_API_KEY';

#Configure HTTP basic authorization: BasicAuth
# provide your username in the user-serial format
api.instance$apiClient$username <- '<user-serial>'; 
# provide your api key generated using the developer portal
api.instance$apiClient$password <- '<api_key>';

result <- api.instance$ResetUserPassword(var.user)


####################  RevokeToken  ####################

library(tiledbcloud)
var.token <- 'token_example' # character | token name or token itself

api.instance <- UserApi$new()

#Configure API key authorization: ApiKeyAuth
api.instance$apiClient$apiKeys['X-TILEDB-REST-API-KEY'] <- 'TODO_YOUR_API_KEY';

#Configure HTTP basic authorization: BasicAuth
# provide your username in the user-serial format
api.instance$apiClient$username <- '<user-serial>'; 
# provide your api key generated using the developer portal
api.instance$apiClient$password <- '<api_key>';

result <- api.instance$RevokeToken(var.token)


####################  TokensGet  ####################

library(tiledbcloud)

api.instance <- UserApi$new()

#Configure API key authorization: ApiKeyAuth
api.instance$apiClient$apiKeys['X-TILEDB-REST-API-KEY'] <- 'TODO_YOUR_API_KEY';

#Configure HTTP basic authorization: BasicAuth
# provide your username in the user-serial format
api.instance$apiClient$username <- '<user-serial>'; 
# provide your api key generated using the developer portal
api.instance$apiClient$password <- '<api_key>';

result <- api.instance$TokensGet()


####################  TokensSessionGet  ####################

library(tiledbcloud)

api.instance <- UserApi$new()

#Configure API key authorization: ApiKeyAuth
api.instance$apiClient$apiKeys['X-TILEDB-REST-API-KEY'] <- 'TODO_YOUR_API_KEY';

#Configure HTTP basic authorization: BasicAuth
# provide your username in the user-serial format
api.instance$apiClient$username <- '<user-serial>'; 
# provide your api key generated using the developer portal
api.instance$apiClient$password <- '<api_key>';

result <- api.instance$TokensSessionGet()


####################  UpdateAWSAccessCredentials  ####################

library(tiledbcloud)
var.namespace <- 'namespace_example' # character | namespace
var.name <- 'name_example' # character | name
var.aws.access.credentials <- AWSAccessCredentials$new() # AWSAccessCredentials | aws credentials to update

api.instance <- UserApi$new()

#Configure API key authorization: ApiKeyAuth
api.instance$apiClient$apiKeys['X-TILEDB-REST-API-KEY'] <- 'TODO_YOUR_API_KEY';

#Configure HTTP basic authorization: BasicAuth
# provide your username in the user-serial format
api.instance$apiClient$username <- '<user-serial>'; 
# provide your api key generated using the developer portal
api.instance$apiClient$password <- '<api_key>';

result <- api.instance$UpdateAWSAccessCredentials(var.namespace, var.name, var.aws.access.credentials)


####################  UpdateUser  ####################

library(tiledbcloud)
var.username <- 'username_example' # character | username or ID
var.user <- User$new() # User | user details to update

api.instance <- UserApi$new()

#Configure API key authorization: ApiKeyAuth
api.instance$apiClient$apiKeys['X-TILEDB-REST-API-KEY'] <- 'TODO_YOUR_API_KEY';

#Configure HTTP basic authorization: BasicAuth
# provide your username in the user-serial format
api.instance$apiClient$username <- '<user-serial>'; 
# provide your api key generated using the developer portal
api.instance$apiClient$password <- '<api_key>';

result <- api.instance$UpdateUser(var.username, var.user)


####################  UpdateUserInOrganization  ####################

library(tiledbcloud)
var.organization <- 'organization_example' # character | organization name
var.username <- 'username_example' # character | username to manipulate
var.user <- OrganizationUser$new() # OrganizationUser | user details to update

api.instance <- UserApi$new()

#Configure API key authorization: ApiKeyAuth
api.instance$apiClient$apiKeys['X-TILEDB-REST-API-KEY'] <- 'TODO_YOUR_API_KEY';

#Configure HTTP basic authorization: BasicAuth
# provide your username in the user-serial format
api.instance$apiClient$username <- '<user-serial>'; 
# provide your api key generated using the developer portal
api.instance$apiClient$password <- '<api_key>';

result <- api.instance$UpdateUserInOrganization(var.organization, var.username, var.user)


}
}
\section{Public fields}{
\if{html}{\out{<div class="r6-fields">}}
\describe{
\item{\code{apiClient}}{Handles the client-server communication.}
}
\if{html}{\out{</div>}}
}
\section{Methods}{
\subsection{Public methods}{
\itemize{
\item \href{#method-UserApi-new}{\code{UserApi$new()}}
\item \href{#method-UserApi-AddAWSAccessCredentials}{\code{UserApi$AddAWSAccessCredentials()}}
\item \href{#method-UserApi-AddAWSAccessCredentialsWithHttpInfo}{\code{UserApi$AddAWSAccessCredentialsWithHttpInfo()}}
\item \href{#method-UserApi-AddUserToOrganization}{\code{UserApi$AddUserToOrganization()}}
\item \href{#method-UserApi-AddUserToOrganizationWithHttpInfo}{\code{UserApi$AddUserToOrganizationWithHttpInfo()}}
\item \href{#method-UserApi-CheckAWSAccessCredentials}{\code{UserApi$CheckAWSAccessCredentials()}}
\item \href{#method-UserApi-CheckAWSAccessCredentialsWithHttpInfo}{\code{UserApi$CheckAWSAccessCredentialsWithHttpInfo()}}
\item \href{#method-UserApi-CheckAWSAccessCredentialsByName}{\code{UserApi$CheckAWSAccessCredentialsByName()}}
\item \href{#method-UserApi-CheckAWSAccessCredentialsByNameWithHttpInfo}{\code{UserApi$CheckAWSAccessCredentialsByNameWithHttpInfo()}}
\item \href{#method-UserApi-ConfirmEmail}{\code{UserApi$ConfirmEmail()}}
\item \href{#method-UserApi-ConfirmEmailWithHttpInfo}{\code{UserApi$ConfirmEmailWithHttpInfo()}}
\item \href{#method-UserApi-CreateUser}{\code{UserApi$CreateUser()}}
\item \href{#method-UserApi-CreateUserWithHttpInfo}{\code{UserApi$CreateUserWithHttpInfo()}}
\item \href{#method-UserApi-DeleteAWSAccessCredentials}{\code{UserApi$DeleteAWSAccessCredentials()}}
\item \href{#method-UserApi-DeleteAWSAccessCredentialsWithHttpInfo}{\code{UserApi$DeleteAWSAccessCredentialsWithHttpInfo()}}
\item \href{#method-UserApi-DeleteUser}{\code{UserApi$DeleteUser()}}
\item \href{#method-UserApi-DeleteUserWithHttpInfo}{\code{UserApi$DeleteUserWithHttpInfo()}}
\item \href{#method-UserApi-DeleteUserFromOrganization}{\code{UserApi$DeleteUserFromOrganization()}}
\item \href{#method-UserApi-DeleteUserFromOrganizationWithHttpInfo}{\code{UserApi$DeleteUserFromOrganizationWithHttpInfo()}}
\item \href{#method-UserApi-GetOrganizationUser}{\code{UserApi$GetOrganizationUser()}}
\item \href{#method-UserApi-GetOrganizationUserWithHttpInfo}{\code{UserApi$GetOrganizationUserWithHttpInfo()}}
\item \href{#method-UserApi-GetSession}{\code{UserApi$GetSession()}}
\item \href{#method-UserApi-GetSessionWithHttpInfo}{\code{UserApi$GetSessionWithHttpInfo()}}
\item \href{#method-UserApi-GetTokenScopes}{\code{UserApi$GetTokenScopes()}}
\item \href{#method-UserApi-GetTokenScopesWithHttpInfo}{\code{UserApi$GetTokenScopesWithHttpInfo()}}
\item \href{#method-UserApi-GetUser}{\code{UserApi$GetUser()}}
\item \href{#method-UserApi-GetUserWithHttpInfo}{\code{UserApi$GetUserWithHttpInfo()}}
\item \href{#method-UserApi-GetUserWithUsername}{\code{UserApi$GetUserWithUsername()}}
\item \href{#method-UserApi-GetUserWithUsernameWithHttpInfo}{\code{UserApi$GetUserWithUsernameWithHttpInfo()}}
\item \href{#method-UserApi-RequestToken}{\code{UserApi$RequestToken()}}
\item \href{#method-UserApi-RequestTokenWithHttpInfo}{\code{UserApi$RequestTokenWithHttpInfo()}}
\item \href{#method-UserApi-ResetUserPassword}{\code{UserApi$ResetUserPassword()}}
\item \href{#method-UserApi-ResetUserPasswordWithHttpInfo}{\code{UserApi$ResetUserPasswordWithHttpInfo()}}
\item \href{#method-UserApi-RevokeToken}{\code{UserApi$RevokeToken()}}
\item \href{#method-UserApi-RevokeTokenWithHttpInfo}{\code{UserApi$RevokeTokenWithHttpInfo()}}
\item \href{#method-UserApi-TokensGet}{\code{UserApi$TokensGet()}}
\item \href{#method-UserApi-TokensGetWithHttpInfo}{\code{UserApi$TokensGetWithHttpInfo()}}
\item \href{#method-UserApi-TokensSessionGet}{\code{UserApi$TokensSessionGet()}}
\item \href{#method-UserApi-TokensSessionGetWithHttpInfo}{\code{UserApi$TokensSessionGetWithHttpInfo()}}
\item \href{#method-UserApi-UpdateAWSAccessCredentials}{\code{UserApi$UpdateAWSAccessCredentials()}}
\item \href{#method-UserApi-UpdateAWSAccessCredentialsWithHttpInfo}{\code{UserApi$UpdateAWSAccessCredentialsWithHttpInfo()}}
\item \href{#method-UserApi-UpdateUser}{\code{UserApi$UpdateUser()}}
\item \href{#method-UserApi-UpdateUserWithHttpInfo}{\code{UserApi$UpdateUserWithHttpInfo()}}
\item \href{#method-UserApi-UpdateUserInOrganization}{\code{UserApi$UpdateUserInOrganization()}}
\item \href{#method-UserApi-UpdateUserInOrganizationWithHttpInfo}{\code{UserApi$UpdateUserInOrganizationWithHttpInfo()}}
\item \href{#method-UserApi-clone}{\code{UserApi$clone()}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-UserApi-new"></a>}}
\if{latex}{\out{\hypertarget{method-UserApi-new}{}}}
\subsection{Method \code{new()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{UserApi$new(apiClient)}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-UserApi-AddAWSAccessCredentials"></a>}}
\if{latex}{\out{\hypertarget{method-UserApi-AddAWSAccessCredentials}{}}}
\subsection{Method \code{AddAWSAccessCredentials()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{UserApi$AddAWSAccessCredentials(namespace, aws.access.credentials, ...)}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-UserApi-AddAWSAccessCredentialsWithHttpInfo"></a>}}
\if{latex}{\out{\hypertarget{method-UserApi-AddAWSAccessCredentialsWithHttpInfo}{}}}
\subsection{Method \code{AddAWSAccessCredentialsWithHttpInfo()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{UserApi$AddAWSAccessCredentialsWithHttpInfo(
  namespace,
  aws.access.credentials,
  ...
)}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-UserApi-AddUserToOrganization"></a>}}
\if{latex}{\out{\hypertarget{method-UserApi-AddUserToOrganization}{}}}
\subsection{Method \code{AddUserToOrganization()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{UserApi$AddUserToOrganization(organization, user, ...)}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-UserApi-AddUserToOrganizationWithHttpInfo"></a>}}
\if{latex}{\out{\hypertarget{method-UserApi-AddUserToOrganizationWithHttpInfo}{}}}
\subsection{Method \code{AddUserToOrganizationWithHttpInfo()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{UserApi$AddUserToOrganizationWithHttpInfo(organization, user, ...)}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-UserApi-CheckAWSAccessCredentials"></a>}}
\if{latex}{\out{\hypertarget{method-UserApi-CheckAWSAccessCredentials}{}}}
\subsection{Method \code{CheckAWSAccessCredentials()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{UserApi$CheckAWSAccessCredentials(namespace, ...)}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-UserApi-CheckAWSAccessCredentialsWithHttpInfo"></a>}}
\if{latex}{\out{\hypertarget{method-UserApi-CheckAWSAccessCredentialsWithHttpInfo}{}}}
\subsection{Method \code{CheckAWSAccessCredentialsWithHttpInfo()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{UserApi$CheckAWSAccessCredentialsWithHttpInfo(namespace, ...)}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-UserApi-CheckAWSAccessCredentialsByName"></a>}}
\if{latex}{\out{\hypertarget{method-UserApi-CheckAWSAccessCredentialsByName}{}}}
\subsection{Method \code{CheckAWSAccessCredentialsByName()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{UserApi$CheckAWSAccessCredentialsByName(namespace, name, ...)}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-UserApi-CheckAWSAccessCredentialsByNameWithHttpInfo"></a>}}
\if{latex}{\out{\hypertarget{method-UserApi-CheckAWSAccessCredentialsByNameWithHttpInfo}{}}}
\subsection{Method \code{CheckAWSAccessCredentialsByNameWithHttpInfo()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{UserApi$CheckAWSAccessCredentialsByNameWithHttpInfo(namespace, name, ...)}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-UserApi-ConfirmEmail"></a>}}
\if{latex}{\out{\hypertarget{method-UserApi-ConfirmEmail}{}}}
\subsection{Method \code{ConfirmEmail()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{UserApi$ConfirmEmail(...)}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-UserApi-ConfirmEmailWithHttpInfo"></a>}}
\if{latex}{\out{\hypertarget{method-UserApi-ConfirmEmailWithHttpInfo}{}}}
\subsection{Method \code{ConfirmEmailWithHttpInfo()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{UserApi$ConfirmEmailWithHttpInfo(...)}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-UserApi-CreateUser"></a>}}
\if{latex}{\out{\hypertarget{method-UserApi-CreateUser}{}}}
\subsection{Method \code{CreateUser()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{UserApi$CreateUser(user, ...)}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-UserApi-CreateUserWithHttpInfo"></a>}}
\if{latex}{\out{\hypertarget{method-UserApi-CreateUserWithHttpInfo}{}}}
\subsection{Method \code{CreateUserWithHttpInfo()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{UserApi$CreateUserWithHttpInfo(user, ...)}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-UserApi-DeleteAWSAccessCredentials"></a>}}
\if{latex}{\out{\hypertarget{method-UserApi-DeleteAWSAccessCredentials}{}}}
\subsection{Method \code{DeleteAWSAccessCredentials()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{UserApi$DeleteAWSAccessCredentials(namespace, name, ...)}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-UserApi-DeleteAWSAccessCredentialsWithHttpInfo"></a>}}
\if{latex}{\out{\hypertarget{method-UserApi-DeleteAWSAccessCredentialsWithHttpInfo}{}}}
\subsection{Method \code{DeleteAWSAccessCredentialsWithHttpInfo()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{UserApi$DeleteAWSAccessCredentialsWithHttpInfo(namespace, name, ...)}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-UserApi-DeleteUser"></a>}}
\if{latex}{\out{\hypertarget{method-UserApi-DeleteUser}{}}}
\subsection{Method \code{DeleteUser()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{UserApi$DeleteUser(username, ...)}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-UserApi-DeleteUserWithHttpInfo"></a>}}
\if{latex}{\out{\hypertarget{method-UserApi-DeleteUserWithHttpInfo}{}}}
\subsection{Method \code{DeleteUserWithHttpInfo()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{UserApi$DeleteUserWithHttpInfo(username, ...)}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-UserApi-DeleteUserFromOrganization"></a>}}
\if{latex}{\out{\hypertarget{method-UserApi-DeleteUserFromOrganization}{}}}
\subsection{Method \code{DeleteUserFromOrganization()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{UserApi$DeleteUserFromOrganization(organization, username, ...)}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-UserApi-DeleteUserFromOrganizationWithHttpInfo"></a>}}
\if{latex}{\out{\hypertarget{method-UserApi-DeleteUserFromOrganizationWithHttpInfo}{}}}
\subsection{Method \code{DeleteUserFromOrganizationWithHttpInfo()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{UserApi$DeleteUserFromOrganizationWithHttpInfo(organization, username, ...)}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-UserApi-GetOrganizationUser"></a>}}
\if{latex}{\out{\hypertarget{method-UserApi-GetOrganizationUser}{}}}
\subsection{Method \code{GetOrganizationUser()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{UserApi$GetOrganizationUser(organization, username, ...)}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-UserApi-GetOrganizationUserWithHttpInfo"></a>}}
\if{latex}{\out{\hypertarget{method-UserApi-GetOrganizationUserWithHttpInfo}{}}}
\subsection{Method \code{GetOrganizationUserWithHttpInfo()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{UserApi$GetOrganizationUserWithHttpInfo(organization, username, ...)}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-UserApi-GetSession"></a>}}
\if{latex}{\out{\hypertarget{method-UserApi-GetSession}{}}}
\subsection{Method \code{GetSession()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{UserApi$GetSession(remember.me = NULL, ...)}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-UserApi-GetSessionWithHttpInfo"></a>}}
\if{latex}{\out{\hypertarget{method-UserApi-GetSessionWithHttpInfo}{}}}
\subsection{Method \code{GetSessionWithHttpInfo()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{UserApi$GetSessionWithHttpInfo(remember.me = NULL, ...)}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-UserApi-GetTokenScopes"></a>}}
\if{latex}{\out{\hypertarget{method-UserApi-GetTokenScopes}{}}}
\subsection{Method \code{GetTokenScopes()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{UserApi$GetTokenScopes(...)}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-UserApi-GetTokenScopesWithHttpInfo"></a>}}
\if{latex}{\out{\hypertarget{method-UserApi-GetTokenScopesWithHttpInfo}{}}}
\subsection{Method \code{GetTokenScopesWithHttpInfo()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{UserApi$GetTokenScopesWithHttpInfo(...)}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-UserApi-GetUser"></a>}}
\if{latex}{\out{\hypertarget{method-UserApi-GetUser}{}}}
\subsection{Method \code{GetUser()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{UserApi$GetUser(...)}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-UserApi-GetUserWithHttpInfo"></a>}}
\if{latex}{\out{\hypertarget{method-UserApi-GetUserWithHttpInfo}{}}}
\subsection{Method \code{GetUserWithHttpInfo()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{UserApi$GetUserWithHttpInfo(...)}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-UserApi-GetUserWithUsername"></a>}}
\if{latex}{\out{\hypertarget{method-UserApi-GetUserWithUsername}{}}}
\subsection{Method \code{GetUserWithUsername()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{UserApi$GetUserWithUsername(username, ...)}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-UserApi-GetUserWithUsernameWithHttpInfo"></a>}}
\if{latex}{\out{\hypertarget{method-UserApi-GetUserWithUsernameWithHttpInfo}{}}}
\subsection{Method \code{GetUserWithUsernameWithHttpInfo()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{UserApi$GetUserWithUsernameWithHttpInfo(username, ...)}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-UserApi-RequestToken"></a>}}
\if{latex}{\out{\hypertarget{method-UserApi-RequestToken}{}}}
\subsection{Method \code{RequestToken()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{UserApi$RequestToken(token.request = NULL, ...)}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-UserApi-RequestTokenWithHttpInfo"></a>}}
\if{latex}{\out{\hypertarget{method-UserApi-RequestTokenWithHttpInfo}{}}}
\subsection{Method \code{RequestTokenWithHttpInfo()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{UserApi$RequestTokenWithHttpInfo(token.request = NULL, ...)}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-UserApi-ResetUserPassword"></a>}}
\if{latex}{\out{\hypertarget{method-UserApi-ResetUserPassword}{}}}
\subsection{Method \code{ResetUserPassword()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{UserApi$ResetUserPassword(user, ...)}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-UserApi-ResetUserPasswordWithHttpInfo"></a>}}
\if{latex}{\out{\hypertarget{method-UserApi-ResetUserPasswordWithHttpInfo}{}}}
\subsection{Method \code{ResetUserPasswordWithHttpInfo()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{UserApi$ResetUserPasswordWithHttpInfo(user, ...)}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-UserApi-RevokeToken"></a>}}
\if{latex}{\out{\hypertarget{method-UserApi-RevokeToken}{}}}
\subsection{Method \code{RevokeToken()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{UserApi$RevokeToken(token, ...)}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-UserApi-RevokeTokenWithHttpInfo"></a>}}
\if{latex}{\out{\hypertarget{method-UserApi-RevokeTokenWithHttpInfo}{}}}
\subsection{Method \code{RevokeTokenWithHttpInfo()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{UserApi$RevokeTokenWithHttpInfo(token, ...)}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-UserApi-TokensGet"></a>}}
\if{latex}{\out{\hypertarget{method-UserApi-TokensGet}{}}}
\subsection{Method \code{TokensGet()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{UserApi$TokensGet(...)}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-UserApi-TokensGetWithHttpInfo"></a>}}
\if{latex}{\out{\hypertarget{method-UserApi-TokensGetWithHttpInfo}{}}}
\subsection{Method \code{TokensGetWithHttpInfo()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{UserApi$TokensGetWithHttpInfo(...)}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-UserApi-TokensSessionGet"></a>}}
\if{latex}{\out{\hypertarget{method-UserApi-TokensSessionGet}{}}}
\subsection{Method \code{TokensSessionGet()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{UserApi$TokensSessionGet(...)}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-UserApi-TokensSessionGetWithHttpInfo"></a>}}
\if{latex}{\out{\hypertarget{method-UserApi-TokensSessionGetWithHttpInfo}{}}}
\subsection{Method \code{TokensSessionGetWithHttpInfo()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{UserApi$TokensSessionGetWithHttpInfo(...)}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-UserApi-UpdateAWSAccessCredentials"></a>}}
\if{latex}{\out{\hypertarget{method-UserApi-UpdateAWSAccessCredentials}{}}}
\subsection{Method \code{UpdateAWSAccessCredentials()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{UserApi$UpdateAWSAccessCredentials(
  namespace,
  name,
  aws.access.credentials,
  ...
)}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-UserApi-UpdateAWSAccessCredentialsWithHttpInfo"></a>}}
\if{latex}{\out{\hypertarget{method-UserApi-UpdateAWSAccessCredentialsWithHttpInfo}{}}}
\subsection{Method \code{UpdateAWSAccessCredentialsWithHttpInfo()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{UserApi$UpdateAWSAccessCredentialsWithHttpInfo(
  namespace,
  name,
  aws.access.credentials,
  ...
)}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-UserApi-UpdateUser"></a>}}
\if{latex}{\out{\hypertarget{method-UserApi-UpdateUser}{}}}
\subsection{Method \code{UpdateUser()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{UserApi$UpdateUser(username, user, ...)}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-UserApi-UpdateUserWithHttpInfo"></a>}}
\if{latex}{\out{\hypertarget{method-UserApi-UpdateUserWithHttpInfo}{}}}
\subsection{Method \code{UpdateUserWithHttpInfo()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{UserApi$UpdateUserWithHttpInfo(username, user, ...)}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-UserApi-UpdateUserInOrganization"></a>}}
\if{latex}{\out{\hypertarget{method-UserApi-UpdateUserInOrganization}{}}}
\subsection{Method \code{UpdateUserInOrganization()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{UserApi$UpdateUserInOrganization(organization, username, user, ...)}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-UserApi-UpdateUserInOrganizationWithHttpInfo"></a>}}
\if{latex}{\out{\hypertarget{method-UserApi-UpdateUserInOrganizationWithHttpInfo}{}}}
\subsection{Method \code{UpdateUserInOrganizationWithHttpInfo()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{UserApi$UpdateUserInOrganizationWithHttpInfo(organization, username, user, ...)}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-UserApi-clone"></a>}}
\if{latex}{\out{\hypertarget{method-UserApi-clone}{}}}
\subsection{Method \code{clone()}}{
The objects of this class are cloneable with this method.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{UserApi$clone(deep = FALSE)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{deep}}{Whether to make a deep clone.}
}
\if{html}{\out{</div>}}
}
}
}
