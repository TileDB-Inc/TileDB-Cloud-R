% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/organization_api.R
\docType{class}
\name{OrganizationApi}
\alias{OrganizationApi}
\title{Organization operations}
\format{
An \code{R6Class} generator object
}
\description{
tiledbcloud.Organization
}
\section{Methods}{

\describe{
\strong{ AddAWSAccessCredentials } \emph{  }
Add aws keys

\itemize{
\item \emph{ @param } namespace character
\item \emph{ @param } aws.access.credentials \link{AWSAccessCredentials}


\item status code : 204 | AWS keys added successfully


\item response headers :

\tabular{ll}{
}
\item status code : 0 | error response

\item return type : Error 
\item response headers :

\tabular{ll}{
}
}

\strong{ AddUserToOrganization } \emph{  }
add a user to an organization

\itemize{
\item \emph{ @param } organization character
\item \emph{ @param } user \link{OrganizationUser}


\item status code : 204 | user added to organization successfully


\item response headers :

\tabular{ll}{
}
\item status code : 0 | error response

\item return type : Error 
\item response headers :

\tabular{ll}{
}
}

\strong{ CheckAWSAccessCredentials } \emph{  }
Check if aws keys are set

\itemize{
\item \emph{ @param } namespace character
\item \emph{ @returnType } list( \link{AWSAccessCredentials} ) \cr


\item status code : 200 | AWS keys are set

\item return type : array[AWSAccessCredentials] 
\item response headers :

\tabular{ll}{
}
\item status code : 0 | error response

\item return type : Error 
\item response headers :

\tabular{ll}{
}
}

\strong{ CheckAWSAccessCredentialsByName } \emph{  }
Check if aws keys are set by name

\itemize{
\item \emph{ @param } namespace character
\item \emph{ @param } name character
\item \emph{ @returnType } \link{AWSAccessCredentials} \cr


\item status code : 200 | AWS keys are set

\item return type : AWSAccessCredentials 
\item response headers :

\tabular{ll}{
}
\item status code : 0 | error response

\item return type : Error 
\item response headers :

\tabular{ll}{
}
}

\strong{ CreateOrganization } \emph{  }
create a organization, the user creating will be listed as owner

\itemize{
\item \emph{ @param } organization \link{Organization}


\item status code : 204 | organization created successfully


\item response headers :

\tabular{ll}{
}
\item status code : 0 | error response

\item return type : Error 
\item response headers :

\tabular{ll}{
}
}

\strong{ DeleteAWSAccessCredentials } \emph{  }
delete a AWS Access credentials in a namespace. This will likely cause arrays to become unreachable

\itemize{
\item \emph{ @param } namespace character
\item \emph{ @param } name character


\item status code : 204 | AWS credentials deleted


\item response headers :

\tabular{ll}{
}
\item status code : 0 | error response

\item return type : Error 
\item response headers :

\tabular{ll}{
}
}

\strong{ DeleteOrganization } \emph{  }
delete a organization

\itemize{
\item \emph{ @param } organization character


\item status code : 204 | organization deleted


\item response headers :

\tabular{ll}{
}
\item status code : 0 | error response

\item return type : Error 
\item response headers :

\tabular{ll}{
}
}

\strong{ DeleteUserFromOrganization } \emph{  }
delete a user from an organization

\itemize{
\item \emph{ @param } organization character
\item \emph{ @param } username character


\item status code : 204 | user delete from organization successfully


\item response headers :

\tabular{ll}{
}
\item status code : 0 | error response

\item return type : Error 
\item response headers :

\tabular{ll}{
}
}

\strong{ GetAllOrganizations } \emph{  }
get all organizations that the user is member of

\itemize{
\item \emph{ @returnType } list( \link{Organization} ) \cr


\item status code : 200 | array of organizations the user is member of

\item return type : array[Organization] 
\item response headers :

\tabular{ll}{
}
\item status code : 400 | Error finding organizations


\item response headers :

\tabular{ll}{
}
\item status code : 500 | Request user not found, or has empty context


\item response headers :

\tabular{ll}{
}
\item status code : 0 | error response

\item return type : Error 
\item response headers :

\tabular{ll}{
}
}

\strong{ GetOrganization } \emph{  }
get a organization

\itemize{
\item \emph{ @param } organization character
\item \emph{ @returnType } \link{Organization} \cr


\item status code : 200 | organization details

\item return type : Organization 
\item response headers :

\tabular{ll}{
}
\item status code : 404 | Organization does not exist


\item response headers :

\tabular{ll}{
}
\item status code : 0 | error response

\item return type : Error 
\item response headers :

\tabular{ll}{
}
}

\strong{ GetOrganizationUser } \emph{  }
get a user from an organization

\itemize{
\item \emph{ @param } organization character
\item \emph{ @param } username character
\item \emph{ @returnType } \link{OrganizationUser} \cr


\item status code : 200 | user from organization

\item return type : OrganizationUser 
\item response headers :

\tabular{ll}{
}
\item status code : 404 | User is not in organization


\item response headers :

\tabular{ll}{
}
\item status code : 0 | error response

\item return type : Error 
\item response headers :

\tabular{ll}{
}
}

\strong{ UpdateAWSAccessCredentials } \emph{  }
Update aws keys or associated buckets. This will update the key associations for each array in the namespace

\itemize{
\item \emph{ @param } namespace character
\item \emph{ @param } name character
\item \emph{ @param } aws.access.credentials \link{AWSAccessCredentials}


\item status code : 204 | AWS keys updated successfully


\item response headers :

\tabular{ll}{
}
\item status code : 0 | error response

\item return type : Error 
\item response headers :

\tabular{ll}{
}
}

\strong{ UpdateOrganization } \emph{  }
update a organization

\itemize{
\item \emph{ @param } organization character
\item \emph{ @param } organization.details \link{Organization}


\item status code : 204 | organization updated successfully


\item response headers :

\tabular{ll}{
}
\item status code : 0 | error response

\item return type : Error 
\item response headers :

\tabular{ll}{
}
}

\strong{ UpdateUserInOrganization } \emph{  }
update a user in an organization

\itemize{
\item \emph{ @param } organization character
\item \emph{ @param } username character
\item \emph{ @param } user \link{OrganizationUser}


\item status code : 204 | user update in organization successfully


\item response headers :

\tabular{ll}{
}
\item status code : 0 | error response

\item return type : Error 
\item response headers :

\tabular{ll}{
}
}

}
}

\examples{
\dontrun{
####################  AddAWSAccessCredentials  ####################

library(tiledbcloud)
var.namespace <- 'namespace_example' # character | namespace
var.aws.access.credentials <- AWSAccessCredentials$new() # AWSAccessCredentials | aws access credentials to store for a namespace

api.instance <- OrganizationApi$new()

#Configure API key authorization: ApiKeyAuth
api.instance$apiClient$apiKeys['X-TILEDB-REST-API-KEY'] <- 'TODO_YOUR_API_KEY';

#Configure HTTP basic authorization: BasicAuth
# provide your username in the user-serial format
api.instance$apiClient$username <- '<user-serial>'; 
# provide your api key generated using the developer portal
api.instance$apiClient$password <- '<api_key>';

result <- api.instance$AddAWSAccessCredentials(var.namespace, var.aws.access.credentials)


####################  AddUserToOrganization  ####################

library(tiledbcloud)
var.organization <- 'organization_example' # character | organization name
var.user <- OrganizationUser$new() # OrganizationUser | user to add

api.instance <- OrganizationApi$new()

#Configure API key authorization: ApiKeyAuth
api.instance$apiClient$apiKeys['X-TILEDB-REST-API-KEY'] <- 'TODO_YOUR_API_KEY';

#Configure HTTP basic authorization: BasicAuth
# provide your username in the user-serial format
api.instance$apiClient$username <- '<user-serial>'; 
# provide your api key generated using the developer portal
api.instance$apiClient$password <- '<api_key>';

result <- api.instance$AddUserToOrganization(var.organization, var.user)


####################  CheckAWSAccessCredentials  ####################

library(tiledbcloud)
var.namespace <- 'namespace_example' # character | namespace

api.instance <- OrganizationApi$new()

#Configure API key authorization: ApiKeyAuth
api.instance$apiClient$apiKeys['X-TILEDB-REST-API-KEY'] <- 'TODO_YOUR_API_KEY';

#Configure HTTP basic authorization: BasicAuth
# provide your username in the user-serial format
api.instance$apiClient$username <- '<user-serial>'; 
# provide your api key generated using the developer portal
api.instance$apiClient$password <- '<api_key>';

result <- api.instance$CheckAWSAccessCredentials(var.namespace)


####################  CheckAWSAccessCredentialsByName  ####################

library(tiledbcloud)
var.namespace <- 'namespace_example' # character | namespace
var.name <- 'name_example' # character | name

api.instance <- OrganizationApi$new()

#Configure API key authorization: ApiKeyAuth
api.instance$apiClient$apiKeys['X-TILEDB-REST-API-KEY'] <- 'TODO_YOUR_API_KEY';

#Configure HTTP basic authorization: BasicAuth
# provide your username in the user-serial format
api.instance$apiClient$username <- '<user-serial>'; 
# provide your api key generated using the developer portal
api.instance$apiClient$password <- '<api_key>';

result <- api.instance$CheckAWSAccessCredentialsByName(var.namespace, var.name)


####################  CreateOrganization  ####################

library(tiledbcloud)
var.organization <- Organization$new() # Organization | organization to create

api.instance <- OrganizationApi$new()

#Configure API key authorization: ApiKeyAuth
api.instance$apiClient$apiKeys['X-TILEDB-REST-API-KEY'] <- 'TODO_YOUR_API_KEY';

#Configure HTTP basic authorization: BasicAuth
# provide your username in the user-serial format
api.instance$apiClient$username <- '<user-serial>'; 
# provide your api key generated using the developer portal
api.instance$apiClient$password <- '<api_key>';

result <- api.instance$CreateOrganization(var.organization)


####################  DeleteAWSAccessCredentials  ####################

library(tiledbcloud)
var.namespace <- 'namespace_example' # character | namespace
var.name <- 'name_example' # character | name

api.instance <- OrganizationApi$new()

#Configure API key authorization: ApiKeyAuth
api.instance$apiClient$apiKeys['X-TILEDB-REST-API-KEY'] <- 'TODO_YOUR_API_KEY';

#Configure HTTP basic authorization: BasicAuth
# provide your username in the user-serial format
api.instance$apiClient$username <- '<user-serial>'; 
# provide your api key generated using the developer portal
api.instance$apiClient$password <- '<api_key>';

result <- api.instance$DeleteAWSAccessCredentials(var.namespace, var.name)


####################  DeleteOrganization  ####################

library(tiledbcloud)
var.organization <- 'organization_example' # character | organization name or ID

api.instance <- OrganizationApi$new()

#Configure API key authorization: ApiKeyAuth
api.instance$apiClient$apiKeys['X-TILEDB-REST-API-KEY'] <- 'TODO_YOUR_API_KEY';

#Configure HTTP basic authorization: BasicAuth
# provide your username in the user-serial format
api.instance$apiClient$username <- '<user-serial>'; 
# provide your api key generated using the developer portal
api.instance$apiClient$password <- '<api_key>';

result <- api.instance$DeleteOrganization(var.organization)


####################  DeleteUserFromOrganization  ####################

library(tiledbcloud)
var.organization <- 'organization_example' # character | organization name
var.username <- 'username_example' # character | username to manipulate

api.instance <- OrganizationApi$new()

#Configure API key authorization: ApiKeyAuth
api.instance$apiClient$apiKeys['X-TILEDB-REST-API-KEY'] <- 'TODO_YOUR_API_KEY';

#Configure HTTP basic authorization: BasicAuth
# provide your username in the user-serial format
api.instance$apiClient$username <- '<user-serial>'; 
# provide your api key generated using the developer portal
api.instance$apiClient$password <- '<api_key>';

result <- api.instance$DeleteUserFromOrganization(var.organization, var.username)


####################  GetAllOrganizations  ####################

library(tiledbcloud)

api.instance <- OrganizationApi$new()

#Configure API key authorization: ApiKeyAuth
api.instance$apiClient$apiKeys['X-TILEDB-REST-API-KEY'] <- 'TODO_YOUR_API_KEY';

#Configure HTTP basic authorization: BasicAuth
# provide your username in the user-serial format
api.instance$apiClient$username <- '<user-serial>'; 
# provide your api key generated using the developer portal
api.instance$apiClient$password <- '<api_key>';

result <- api.instance$GetAllOrganizations()


####################  GetOrganization  ####################

library(tiledbcloud)
var.organization <- 'organization_example' # character | organization name or ID

api.instance <- OrganizationApi$new()

#Configure API key authorization: ApiKeyAuth
api.instance$apiClient$apiKeys['X-TILEDB-REST-API-KEY'] <- 'TODO_YOUR_API_KEY';

#Configure HTTP basic authorization: BasicAuth
# provide your username in the user-serial format
api.instance$apiClient$username <- '<user-serial>'; 
# provide your api key generated using the developer portal
api.instance$apiClient$password <- '<api_key>';

result <- api.instance$GetOrganization(var.organization)


####################  GetOrganizationUser  ####################

library(tiledbcloud)
var.organization <- 'organization_example' # character | organization name
var.username <- 'username_example' # character | username to manipulate

api.instance <- OrganizationApi$new()

#Configure API key authorization: ApiKeyAuth
api.instance$apiClient$apiKeys['X-TILEDB-REST-API-KEY'] <- 'TODO_YOUR_API_KEY';

#Configure HTTP basic authorization: BasicAuth
# provide your username in the user-serial format
api.instance$apiClient$username <- '<user-serial>'; 
# provide your api key generated using the developer portal
api.instance$apiClient$password <- '<api_key>';

result <- api.instance$GetOrganizationUser(var.organization, var.username)


####################  UpdateAWSAccessCredentials  ####################

library(tiledbcloud)
var.namespace <- 'namespace_example' # character | namespace
var.name <- 'name_example' # character | name
var.aws.access.credentials <- AWSAccessCredentials$new() # AWSAccessCredentials | aws credentials to update

api.instance <- OrganizationApi$new()

#Configure API key authorization: ApiKeyAuth
api.instance$apiClient$apiKeys['X-TILEDB-REST-API-KEY'] <- 'TODO_YOUR_API_KEY';

#Configure HTTP basic authorization: BasicAuth
# provide your username in the user-serial format
api.instance$apiClient$username <- '<user-serial>'; 
# provide your api key generated using the developer portal
api.instance$apiClient$password <- '<api_key>';

result <- api.instance$UpdateAWSAccessCredentials(var.namespace, var.name, var.aws.access.credentials)


####################  UpdateOrganization  ####################

library(tiledbcloud)
var.organization <- 'organization_example' # character | organization name or ID
var.organization.details <- Organization$new() # Organization | organization details to update

api.instance <- OrganizationApi$new()

#Configure API key authorization: ApiKeyAuth
api.instance$apiClient$apiKeys['X-TILEDB-REST-API-KEY'] <- 'TODO_YOUR_API_KEY';

#Configure HTTP basic authorization: BasicAuth
# provide your username in the user-serial format
api.instance$apiClient$username <- '<user-serial>'; 
# provide your api key generated using the developer portal
api.instance$apiClient$password <- '<api_key>';

result <- api.instance$UpdateOrganization(var.organization, var.organization.details)


####################  UpdateUserInOrganization  ####################

library(tiledbcloud)
var.organization <- 'organization_example' # character | organization name
var.username <- 'username_example' # character | username to manipulate
var.user <- OrganizationUser$new() # OrganizationUser | user details to update

api.instance <- OrganizationApi$new()

#Configure API key authorization: ApiKeyAuth
api.instance$apiClient$apiKeys['X-TILEDB-REST-API-KEY'] <- 'TODO_YOUR_API_KEY';

#Configure HTTP basic authorization: BasicAuth
# provide your username in the user-serial format
api.instance$apiClient$username <- '<user-serial>'; 
# provide your api key generated using the developer portal
api.instance$apiClient$password <- '<api_key>';

result <- api.instance$UpdateUserInOrganization(var.organization, var.username, var.user)


}
}
\section{Public fields}{
\if{html}{\out{<div class="r6-fields">}}
\describe{
\item{\code{apiClient}}{Handles the client-server communication.}
}
\if{html}{\out{</div>}}
}
\section{Methods}{
\subsection{Public methods}{
\itemize{
\item \href{#method-OrganizationApi-new}{\code{OrganizationApi$new()}}
\item \href{#method-OrganizationApi-AddAWSAccessCredentials}{\code{OrganizationApi$AddAWSAccessCredentials()}}
\item \href{#method-OrganizationApi-AddAWSAccessCredentialsWithHttpInfo}{\code{OrganizationApi$AddAWSAccessCredentialsWithHttpInfo()}}
\item \href{#method-OrganizationApi-AddUserToOrganization}{\code{OrganizationApi$AddUserToOrganization()}}
\item \href{#method-OrganizationApi-AddUserToOrganizationWithHttpInfo}{\code{OrganizationApi$AddUserToOrganizationWithHttpInfo()}}
\item \href{#method-OrganizationApi-CheckAWSAccessCredentials}{\code{OrganizationApi$CheckAWSAccessCredentials()}}
\item \href{#method-OrganizationApi-CheckAWSAccessCredentialsWithHttpInfo}{\code{OrganizationApi$CheckAWSAccessCredentialsWithHttpInfo()}}
\item \href{#method-OrganizationApi-CheckAWSAccessCredentialsByName}{\code{OrganizationApi$CheckAWSAccessCredentialsByName()}}
\item \href{#method-OrganizationApi-CheckAWSAccessCredentialsByNameWithHttpInfo}{\code{OrganizationApi$CheckAWSAccessCredentialsByNameWithHttpInfo()}}
\item \href{#method-OrganizationApi-CreateOrganization}{\code{OrganizationApi$CreateOrganization()}}
\item \href{#method-OrganizationApi-CreateOrganizationWithHttpInfo}{\code{OrganizationApi$CreateOrganizationWithHttpInfo()}}
\item \href{#method-OrganizationApi-DeleteAWSAccessCredentials}{\code{OrganizationApi$DeleteAWSAccessCredentials()}}
\item \href{#method-OrganizationApi-DeleteAWSAccessCredentialsWithHttpInfo}{\code{OrganizationApi$DeleteAWSAccessCredentialsWithHttpInfo()}}
\item \href{#method-OrganizationApi-DeleteOrganization}{\code{OrganizationApi$DeleteOrganization()}}
\item \href{#method-OrganizationApi-DeleteOrganizationWithHttpInfo}{\code{OrganizationApi$DeleteOrganizationWithHttpInfo()}}
\item \href{#method-OrganizationApi-DeleteUserFromOrganization}{\code{OrganizationApi$DeleteUserFromOrganization()}}
\item \href{#method-OrganizationApi-DeleteUserFromOrganizationWithHttpInfo}{\code{OrganizationApi$DeleteUserFromOrganizationWithHttpInfo()}}
\item \href{#method-OrganizationApi-GetAllOrganizations}{\code{OrganizationApi$GetAllOrganizations()}}
\item \href{#method-OrganizationApi-GetAllOrganizationsWithHttpInfo}{\code{OrganizationApi$GetAllOrganizationsWithHttpInfo()}}
\item \href{#method-OrganizationApi-GetOrganization}{\code{OrganizationApi$GetOrganization()}}
\item \href{#method-OrganizationApi-GetOrganizationWithHttpInfo}{\code{OrganizationApi$GetOrganizationWithHttpInfo()}}
\item \href{#method-OrganizationApi-GetOrganizationUser}{\code{OrganizationApi$GetOrganizationUser()}}
\item \href{#method-OrganizationApi-GetOrganizationUserWithHttpInfo}{\code{OrganizationApi$GetOrganizationUserWithHttpInfo()}}
\item \href{#method-OrganizationApi-UpdateAWSAccessCredentials}{\code{OrganizationApi$UpdateAWSAccessCredentials()}}
\item \href{#method-OrganizationApi-UpdateAWSAccessCredentialsWithHttpInfo}{\code{OrganizationApi$UpdateAWSAccessCredentialsWithHttpInfo()}}
\item \href{#method-OrganizationApi-UpdateOrganization}{\code{OrganizationApi$UpdateOrganization()}}
\item \href{#method-OrganizationApi-UpdateOrganizationWithHttpInfo}{\code{OrganizationApi$UpdateOrganizationWithHttpInfo()}}
\item \href{#method-OrganizationApi-UpdateUserInOrganization}{\code{OrganizationApi$UpdateUserInOrganization()}}
\item \href{#method-OrganizationApi-UpdateUserInOrganizationWithHttpInfo}{\code{OrganizationApi$UpdateUserInOrganizationWithHttpInfo()}}
\item \href{#method-OrganizationApi-clone}{\code{OrganizationApi$clone()}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-OrganizationApi-new"></a>}}
\if{latex}{\out{\hypertarget{method-OrganizationApi-new}{}}}
\subsection{Method \code{new()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{OrganizationApi$new(apiClient)}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-OrganizationApi-AddAWSAccessCredentials"></a>}}
\if{latex}{\out{\hypertarget{method-OrganizationApi-AddAWSAccessCredentials}{}}}
\subsection{Method \code{AddAWSAccessCredentials()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{OrganizationApi$AddAWSAccessCredentials(namespace, aws.access.credentials, ...)}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-OrganizationApi-AddAWSAccessCredentialsWithHttpInfo"></a>}}
\if{latex}{\out{\hypertarget{method-OrganizationApi-AddAWSAccessCredentialsWithHttpInfo}{}}}
\subsection{Method \code{AddAWSAccessCredentialsWithHttpInfo()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{OrganizationApi$AddAWSAccessCredentialsWithHttpInfo(
  namespace,
  aws.access.credentials,
  ...
)}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-OrganizationApi-AddUserToOrganization"></a>}}
\if{latex}{\out{\hypertarget{method-OrganizationApi-AddUserToOrganization}{}}}
\subsection{Method \code{AddUserToOrganization()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{OrganizationApi$AddUserToOrganization(organization, user, ...)}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-OrganizationApi-AddUserToOrganizationWithHttpInfo"></a>}}
\if{latex}{\out{\hypertarget{method-OrganizationApi-AddUserToOrganizationWithHttpInfo}{}}}
\subsection{Method \code{AddUserToOrganizationWithHttpInfo()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{OrganizationApi$AddUserToOrganizationWithHttpInfo(organization, user, ...)}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-OrganizationApi-CheckAWSAccessCredentials"></a>}}
\if{latex}{\out{\hypertarget{method-OrganizationApi-CheckAWSAccessCredentials}{}}}
\subsection{Method \code{CheckAWSAccessCredentials()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{OrganizationApi$CheckAWSAccessCredentials(namespace, ...)}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-OrganizationApi-CheckAWSAccessCredentialsWithHttpInfo"></a>}}
\if{latex}{\out{\hypertarget{method-OrganizationApi-CheckAWSAccessCredentialsWithHttpInfo}{}}}
\subsection{Method \code{CheckAWSAccessCredentialsWithHttpInfo()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{OrganizationApi$CheckAWSAccessCredentialsWithHttpInfo(namespace, ...)}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-OrganizationApi-CheckAWSAccessCredentialsByName"></a>}}
\if{latex}{\out{\hypertarget{method-OrganizationApi-CheckAWSAccessCredentialsByName}{}}}
\subsection{Method \code{CheckAWSAccessCredentialsByName()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{OrganizationApi$CheckAWSAccessCredentialsByName(namespace, name, ...)}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-OrganizationApi-CheckAWSAccessCredentialsByNameWithHttpInfo"></a>}}
\if{latex}{\out{\hypertarget{method-OrganizationApi-CheckAWSAccessCredentialsByNameWithHttpInfo}{}}}
\subsection{Method \code{CheckAWSAccessCredentialsByNameWithHttpInfo()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{OrganizationApi$CheckAWSAccessCredentialsByNameWithHttpInfo(
  namespace,
  name,
  ...
)}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-OrganizationApi-CreateOrganization"></a>}}
\if{latex}{\out{\hypertarget{method-OrganizationApi-CreateOrganization}{}}}
\subsection{Method \code{CreateOrganization()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{OrganizationApi$CreateOrganization(organization, ...)}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-OrganizationApi-CreateOrganizationWithHttpInfo"></a>}}
\if{latex}{\out{\hypertarget{method-OrganizationApi-CreateOrganizationWithHttpInfo}{}}}
\subsection{Method \code{CreateOrganizationWithHttpInfo()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{OrganizationApi$CreateOrganizationWithHttpInfo(organization, ...)}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-OrganizationApi-DeleteAWSAccessCredentials"></a>}}
\if{latex}{\out{\hypertarget{method-OrganizationApi-DeleteAWSAccessCredentials}{}}}
\subsection{Method \code{DeleteAWSAccessCredentials()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{OrganizationApi$DeleteAWSAccessCredentials(namespace, name, ...)}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-OrganizationApi-DeleteAWSAccessCredentialsWithHttpInfo"></a>}}
\if{latex}{\out{\hypertarget{method-OrganizationApi-DeleteAWSAccessCredentialsWithHttpInfo}{}}}
\subsection{Method \code{DeleteAWSAccessCredentialsWithHttpInfo()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{OrganizationApi$DeleteAWSAccessCredentialsWithHttpInfo(namespace, name, ...)}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-OrganizationApi-DeleteOrganization"></a>}}
\if{latex}{\out{\hypertarget{method-OrganizationApi-DeleteOrganization}{}}}
\subsection{Method \code{DeleteOrganization()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{OrganizationApi$DeleteOrganization(organization, ...)}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-OrganizationApi-DeleteOrganizationWithHttpInfo"></a>}}
\if{latex}{\out{\hypertarget{method-OrganizationApi-DeleteOrganizationWithHttpInfo}{}}}
\subsection{Method \code{DeleteOrganizationWithHttpInfo()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{OrganizationApi$DeleteOrganizationWithHttpInfo(organization, ...)}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-OrganizationApi-DeleteUserFromOrganization"></a>}}
\if{latex}{\out{\hypertarget{method-OrganizationApi-DeleteUserFromOrganization}{}}}
\subsection{Method \code{DeleteUserFromOrganization()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{OrganizationApi$DeleteUserFromOrganization(organization, username, ...)}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-OrganizationApi-DeleteUserFromOrganizationWithHttpInfo"></a>}}
\if{latex}{\out{\hypertarget{method-OrganizationApi-DeleteUserFromOrganizationWithHttpInfo}{}}}
\subsection{Method \code{DeleteUserFromOrganizationWithHttpInfo()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{OrganizationApi$DeleteUserFromOrganizationWithHttpInfo(
  organization,
  username,
  ...
)}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-OrganizationApi-GetAllOrganizations"></a>}}
\if{latex}{\out{\hypertarget{method-OrganizationApi-GetAllOrganizations}{}}}
\subsection{Method \code{GetAllOrganizations()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{OrganizationApi$GetAllOrganizations(...)}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-OrganizationApi-GetAllOrganizationsWithHttpInfo"></a>}}
\if{latex}{\out{\hypertarget{method-OrganizationApi-GetAllOrganizationsWithHttpInfo}{}}}
\subsection{Method \code{GetAllOrganizationsWithHttpInfo()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{OrganizationApi$GetAllOrganizationsWithHttpInfo(...)}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-OrganizationApi-GetOrganization"></a>}}
\if{latex}{\out{\hypertarget{method-OrganizationApi-GetOrganization}{}}}
\subsection{Method \code{GetOrganization()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{OrganizationApi$GetOrganization(organization, ...)}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-OrganizationApi-GetOrganizationWithHttpInfo"></a>}}
\if{latex}{\out{\hypertarget{method-OrganizationApi-GetOrganizationWithHttpInfo}{}}}
\subsection{Method \code{GetOrganizationWithHttpInfo()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{OrganizationApi$GetOrganizationWithHttpInfo(organization, ...)}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-OrganizationApi-GetOrganizationUser"></a>}}
\if{latex}{\out{\hypertarget{method-OrganizationApi-GetOrganizationUser}{}}}
\subsection{Method \code{GetOrganizationUser()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{OrganizationApi$GetOrganizationUser(organization, username, ...)}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-OrganizationApi-GetOrganizationUserWithHttpInfo"></a>}}
\if{latex}{\out{\hypertarget{method-OrganizationApi-GetOrganizationUserWithHttpInfo}{}}}
\subsection{Method \code{GetOrganizationUserWithHttpInfo()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{OrganizationApi$GetOrganizationUserWithHttpInfo(organization, username, ...)}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-OrganizationApi-UpdateAWSAccessCredentials"></a>}}
\if{latex}{\out{\hypertarget{method-OrganizationApi-UpdateAWSAccessCredentials}{}}}
\subsection{Method \code{UpdateAWSAccessCredentials()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{OrganizationApi$UpdateAWSAccessCredentials(
  namespace,
  name,
  aws.access.credentials,
  ...
)}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-OrganizationApi-UpdateAWSAccessCredentialsWithHttpInfo"></a>}}
\if{latex}{\out{\hypertarget{method-OrganizationApi-UpdateAWSAccessCredentialsWithHttpInfo}{}}}
\subsection{Method \code{UpdateAWSAccessCredentialsWithHttpInfo()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{OrganizationApi$UpdateAWSAccessCredentialsWithHttpInfo(
  namespace,
  name,
  aws.access.credentials,
  ...
)}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-OrganizationApi-UpdateOrganization"></a>}}
\if{latex}{\out{\hypertarget{method-OrganizationApi-UpdateOrganization}{}}}
\subsection{Method \code{UpdateOrganization()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{OrganizationApi$UpdateOrganization(organization, organization.details, ...)}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-OrganizationApi-UpdateOrganizationWithHttpInfo"></a>}}
\if{latex}{\out{\hypertarget{method-OrganizationApi-UpdateOrganizationWithHttpInfo}{}}}
\subsection{Method \code{UpdateOrganizationWithHttpInfo()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{OrganizationApi$UpdateOrganizationWithHttpInfo(
  organization,
  organization.details,
  ...
)}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-OrganizationApi-UpdateUserInOrganization"></a>}}
\if{latex}{\out{\hypertarget{method-OrganizationApi-UpdateUserInOrganization}{}}}
\subsection{Method \code{UpdateUserInOrganization()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{OrganizationApi$UpdateUserInOrganization(organization, username, user, ...)}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-OrganizationApi-UpdateUserInOrganizationWithHttpInfo"></a>}}
\if{latex}{\out{\hypertarget{method-OrganizationApi-UpdateUserInOrganizationWithHttpInfo}{}}}
\subsection{Method \code{UpdateUserInOrganizationWithHttpInfo()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{OrganizationApi$UpdateUserInOrganizationWithHttpInfo(
  organization,
  username,
  user,
  ...
)}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-OrganizationApi-clone"></a>}}
\if{latex}{\out{\hypertarget{method-OrganizationApi-clone}{}}}
\subsection{Method \code{clone()}}{
The objects of this class are cloneable with this method.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{OrganizationApi$clone(deep = FALSE)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{deep}}{Whether to make a deep clone.}
}
\if{html}{\out{</div>}}
}
}
}
