% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/groups_api.R
\docType{class}
\name{GroupsApi}
\alias{GroupsApi}
\title{Groups operations}
\format{
An \code{R6Class} generator object
}
\description{
tiledbcloud.Groups
}
\section{Methods}{

\describe{
\strong{ AddAsset } \emph{  }
Adds an asset(array, notebook, udf etc) to a group

\itemize{
\item \emph{ @param } namespace character
\item \emph{ @param } name character
\item \emph{ @param } asset.namespace character
\item \emph{ @param } asset.name character


\item status code : 204 | asset added successfully


\item response headers :

\tabular{ll}{
}
\item status code : 0 | error response

\item return type : Error 
\item response headers :

\tabular{ll}{
}
}

\strong{ CreateGroup } \emph{  }
Creates a new, empty group in the namespace.

\itemize{
\item \emph{ @param } namespace character
\item \emph{ @param } name character
\item \emph{ @param } group.create \link{GroupCreate}


\item status code : 204 | group created successfully


\item response headers :

\tabular{ll}{
}
\item status code : 0 | error response

\item return type : Error 
\item response headers :

\tabular{ll}{
}
}

\strong{ DeleteGroup } \emph{  }
Deletes the group and all the subgroups recursively. The assets are not deleted nor are not relocated to any other group

\itemize{
\item \emph{ @param } namespace character
\item \emph{ @param } name character


\item status code : 204 | group deleted successfully


\item response headers :

\tabular{ll}{
}
\item status code : 0 | error response

\item return type : Error 
\item response headers :

\tabular{ll}{
}
}

\strong{ ListGroup } \emph{  }
Returns the contents, assets and subgroups, of the group

\itemize{
\item \emph{ @param } namespace character
\item \emph{ @param } name character
\item \emph{ @param } output Enum < [attributes, groups, assets] > 
\item \emph{ @param } page integer
\item \emph{ @param } per.page integer
\item \emph{ @returnType } \link{GroupListing} \cr


\item status code : 200 | the group contents

\item return type : GroupListing 
\item response headers :

\tabular{ll}{
}
\item status code : 0 | error response

\item return type : Error 
\item response headers :

\tabular{ll}{
}
}

\strong{ ListTopLevelGroups } \emph{  }
Returns one page of top level groups in namespace.

\itemize{
\item \emph{ @param } namespace character
\item \emph{ @param } page integer
\item \emph{ @param } per.page integer
\item \emph{ @returnType } \link{GroupListing} \cr


\item status code : 200 | the group contents

\item return type : GroupListing 
\item response headers :

\tabular{ll}{
}
\item status code : 0 | error response

\item return type : Error 
\item response headers :

\tabular{ll}{
}
}

\strong{ RemoveAsset } \emph{  }
Removes an asset from a group

\itemize{
\item \emph{ @param } namespace character
\item \emph{ @param } name character
\item \emph{ @param } asset.namespace character
\item \emph{ @param } asset.name character


\item status code : 204 | asset removed successfully


\item response headers :

\tabular{ll}{
}
\item status code : 0 | error response

\item return type : Error 
\item response headers :

\tabular{ll}{
}
}

\strong{ UpdateGroup } \emph{  }
Changes attributes of the group

\itemize{
\item \emph{ @param } namespace character
\item \emph{ @param } name character
\item \emph{ @param } group.update \link{GroupUpdate}


\item status code : 204 | attributes changed successfully


\item response headers :

\tabular{ll}{
}
\item status code : 0 | error response

\item return type : Error 
\item response headers :

\tabular{ll}{
}
}

}
}

\examples{
\dontrun{
####################  AddAsset  ####################

library(tiledbcloud)
var.namespace <- 'namespace_example' # character | The namespace of the group
var.name <- 'name_example' # character | The name of the group
var.asset.namespace <- 'asset.namespace_example' # character | The namespace of the asset
var.asset.name <- 'asset.name_example' # character | The name of the asset

api.instance <- GroupsApi$new()

#Configure API key authorization: ApiKeyAuth
api.instance$apiClient$apiKeys['X-TILEDB-REST-API-KEY'] <- 'TODO_YOUR_API_KEY';

#Configure HTTP basic authorization: BasicAuth
# provide your username in the user-serial format
api.instance$apiClient$username <- '<user-serial>'; 
# provide your api key generated using the developer portal
api.instance$apiClient$password <- '<api_key>';

result <- api.instance$AddAsset(var.namespace, var.name, var.asset.namespace, var.asset.name)


####################  CreateGroup  ####################

library(tiledbcloud)
var.namespace <- 'namespace_example' # character | The namespace of the group
var.name <- 'name_example' # character | The name of the group
var.group.create <- GroupCreate$new() # GroupCreate | 

api.instance <- GroupsApi$new()

#Configure API key authorization: ApiKeyAuth
api.instance$apiClient$apiKeys['X-TILEDB-REST-API-KEY'] <- 'TODO_YOUR_API_KEY';

#Configure HTTP basic authorization: BasicAuth
# provide your username in the user-serial format
api.instance$apiClient$username <- '<user-serial>'; 
# provide your api key generated using the developer portal
api.instance$apiClient$password <- '<api_key>';

result <- api.instance$CreateGroup(var.namespace, var.name, group.create=var.group.create)


####################  DeleteGroup  ####################

library(tiledbcloud)
var.namespace <- 'namespace_example' # character | The namespace of the group
var.name <- 'name_example' # character | The name of the group

api.instance <- GroupsApi$new()

#Configure API key authorization: ApiKeyAuth
api.instance$apiClient$apiKeys['X-TILEDB-REST-API-KEY'] <- 'TODO_YOUR_API_KEY';

#Configure HTTP basic authorization: BasicAuth
# provide your username in the user-serial format
api.instance$apiClient$username <- '<user-serial>'; 
# provide your api key generated using the developer portal
api.instance$apiClient$password <- '<api_key>';

result <- api.instance$DeleteGroup(var.namespace, var.name)


####################  ListGroup  ####################

library(tiledbcloud)
var.namespace <- 'namespace_example' # character | The namespace of the group
var.name <- 'name_example' # character | The name of the group
var.output <- 'output_example' # character | 
var.page <- 56 # integer | pagination offset for assets
var.per.page <- 56 # integer | pagination limit for assets

api.instance <- GroupsApi$new()

#Configure API key authorization: ApiKeyAuth
api.instance$apiClient$apiKeys['X-TILEDB-REST-API-KEY'] <- 'TODO_YOUR_API_KEY';

#Configure HTTP basic authorization: BasicAuth
# provide your username in the user-serial format
api.instance$apiClient$username <- '<user-serial>'; 
# provide your api key generated using the developer portal
api.instance$apiClient$password <- '<api_key>';

result <- api.instance$ListGroup(var.namespace, var.name, output=var.output, page=var.page, per.page=var.per.page)


####################  ListTopLevelGroups  ####################

library(tiledbcloud)
var.namespace <- 'namespace_example' # character | The namespace to operate on
var.page <- 56 # integer | pagination offset
var.per.page <- 56 # integer | pagination limit

api.instance <- GroupsApi$new()

#Configure API key authorization: ApiKeyAuth
api.instance$apiClient$apiKeys['X-TILEDB-REST-API-KEY'] <- 'TODO_YOUR_API_KEY';

#Configure HTTP basic authorization: BasicAuth
# provide your username in the user-serial format
api.instance$apiClient$username <- '<user-serial>'; 
# provide your api key generated using the developer portal
api.instance$apiClient$password <- '<api_key>';

result <- api.instance$ListTopLevelGroups(var.namespace, page=var.page, per.page=var.per.page)


####################  RemoveAsset  ####################

library(tiledbcloud)
var.namespace <- 'namespace_example' # character | The namespace of the group
var.name <- 'name_example' # character | The name of the group
var.asset.namespace <- 'asset.namespace_example' # character | The namespace of the asset
var.asset.name <- 'asset.name_example' # character | The name of the asset

api.instance <- GroupsApi$new()

#Configure API key authorization: ApiKeyAuth
api.instance$apiClient$apiKeys['X-TILEDB-REST-API-KEY'] <- 'TODO_YOUR_API_KEY';

#Configure HTTP basic authorization: BasicAuth
# provide your username in the user-serial format
api.instance$apiClient$username <- '<user-serial>'; 
# provide your api key generated using the developer portal
api.instance$apiClient$password <- '<api_key>';

result <- api.instance$RemoveAsset(var.namespace, var.name, var.asset.namespace, var.asset.name)


####################  UpdateGroup  ####################

library(tiledbcloud)
var.namespace <- 'namespace_example' # character | The namespace of the group
var.name <- 'name_example' # character | The name of the group
var.group.update <- GroupUpdate$new() # GroupUpdate | 

api.instance <- GroupsApi$new()

#Configure API key authorization: ApiKeyAuth
api.instance$apiClient$apiKeys['X-TILEDB-REST-API-KEY'] <- 'TODO_YOUR_API_KEY';

#Configure HTTP basic authorization: BasicAuth
# provide your username in the user-serial format
api.instance$apiClient$username <- '<user-serial>'; 
# provide your api key generated using the developer portal
api.instance$apiClient$password <- '<api_key>';

result <- api.instance$UpdateGroup(var.namespace, var.name, group.update=var.group.update)


}
}
\section{Public fields}{
\if{html}{\out{<div class="r6-fields">}}
\describe{
\item{\code{apiClient}}{Handles the client-server communication.}
}
\if{html}{\out{</div>}}
}
\section{Methods}{
\subsection{Public methods}{
\itemize{
\item \href{#method-new}{\code{GroupsApi$new()}}
\item \href{#method-AddAsset}{\code{GroupsApi$AddAsset()}}
\item \href{#method-AddAssetWithHttpInfo}{\code{GroupsApi$AddAssetWithHttpInfo()}}
\item \href{#method-CreateGroup}{\code{GroupsApi$CreateGroup()}}
\item \href{#method-CreateGroupWithHttpInfo}{\code{GroupsApi$CreateGroupWithHttpInfo()}}
\item \href{#method-DeleteGroup}{\code{GroupsApi$DeleteGroup()}}
\item \href{#method-DeleteGroupWithHttpInfo}{\code{GroupsApi$DeleteGroupWithHttpInfo()}}
\item \href{#method-ListGroup}{\code{GroupsApi$ListGroup()}}
\item \href{#method-ListGroupWithHttpInfo}{\code{GroupsApi$ListGroupWithHttpInfo()}}
\item \href{#method-ListTopLevelGroups}{\code{GroupsApi$ListTopLevelGroups()}}
\item \href{#method-ListTopLevelGroupsWithHttpInfo}{\code{GroupsApi$ListTopLevelGroupsWithHttpInfo()}}
\item \href{#method-RemoveAsset}{\code{GroupsApi$RemoveAsset()}}
\item \href{#method-RemoveAssetWithHttpInfo}{\code{GroupsApi$RemoveAssetWithHttpInfo()}}
\item \href{#method-UpdateGroup}{\code{GroupsApi$UpdateGroup()}}
\item \href{#method-UpdateGroupWithHttpInfo}{\code{GroupsApi$UpdateGroupWithHttpInfo()}}
\item \href{#method-clone}{\code{GroupsApi$clone()}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-new"></a>}}
\if{latex}{\out{\hypertarget{method-new}{}}}
\subsection{Method \code{new()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{GroupsApi$new(apiClient)}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-AddAsset"></a>}}
\if{latex}{\out{\hypertarget{method-AddAsset}{}}}
\subsection{Method \code{AddAsset()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{GroupsApi$AddAsset(namespace, name, asset.namespace, asset.name, ...)}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-AddAssetWithHttpInfo"></a>}}
\if{latex}{\out{\hypertarget{method-AddAssetWithHttpInfo}{}}}
\subsection{Method \code{AddAssetWithHttpInfo()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{GroupsApi$AddAssetWithHttpInfo(
  namespace,
  name,
  asset.namespace,
  asset.name,
  ...
)}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-CreateGroup"></a>}}
\if{latex}{\out{\hypertarget{method-CreateGroup}{}}}
\subsection{Method \code{CreateGroup()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{GroupsApi$CreateGroup(namespace, name, group.create = NULL, ...)}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-CreateGroupWithHttpInfo"></a>}}
\if{latex}{\out{\hypertarget{method-CreateGroupWithHttpInfo}{}}}
\subsection{Method \code{CreateGroupWithHttpInfo()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{GroupsApi$CreateGroupWithHttpInfo(namespace, name, group.create = NULL, ...)}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-DeleteGroup"></a>}}
\if{latex}{\out{\hypertarget{method-DeleteGroup}{}}}
\subsection{Method \code{DeleteGroup()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{GroupsApi$DeleteGroup(namespace, name, ...)}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-DeleteGroupWithHttpInfo"></a>}}
\if{latex}{\out{\hypertarget{method-DeleteGroupWithHttpInfo}{}}}
\subsection{Method \code{DeleteGroupWithHttpInfo()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{GroupsApi$DeleteGroupWithHttpInfo(namespace, name, ...)}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-ListGroup"></a>}}
\if{latex}{\out{\hypertarget{method-ListGroup}{}}}
\subsection{Method \code{ListGroup()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{GroupsApi$ListGroup(
  namespace,
  name,
  output = NULL,
  page = NULL,
  per.page = NULL,
  ...
)}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-ListGroupWithHttpInfo"></a>}}
\if{latex}{\out{\hypertarget{method-ListGroupWithHttpInfo}{}}}
\subsection{Method \code{ListGroupWithHttpInfo()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{GroupsApi$ListGroupWithHttpInfo(
  namespace,
  name,
  output = NULL,
  page = NULL,
  per.page = NULL,
  ...
)}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-ListTopLevelGroups"></a>}}
\if{latex}{\out{\hypertarget{method-ListTopLevelGroups}{}}}
\subsection{Method \code{ListTopLevelGroups()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{GroupsApi$ListTopLevelGroups(namespace, page = NULL, per.page = NULL, ...)}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-ListTopLevelGroupsWithHttpInfo"></a>}}
\if{latex}{\out{\hypertarget{method-ListTopLevelGroupsWithHttpInfo}{}}}
\subsection{Method \code{ListTopLevelGroupsWithHttpInfo()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{GroupsApi$ListTopLevelGroupsWithHttpInfo(
  namespace,
  page = NULL,
  per.page = NULL,
  ...
)}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-RemoveAsset"></a>}}
\if{latex}{\out{\hypertarget{method-RemoveAsset}{}}}
\subsection{Method \code{RemoveAsset()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{GroupsApi$RemoveAsset(namespace, name, asset.namespace, asset.name, ...)}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-RemoveAssetWithHttpInfo"></a>}}
\if{latex}{\out{\hypertarget{method-RemoveAssetWithHttpInfo}{}}}
\subsection{Method \code{RemoveAssetWithHttpInfo()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{GroupsApi$RemoveAssetWithHttpInfo(
  namespace,
  name,
  asset.namespace,
  asset.name,
  ...
)}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-UpdateGroup"></a>}}
\if{latex}{\out{\hypertarget{method-UpdateGroup}{}}}
\subsection{Method \code{UpdateGroup()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{GroupsApi$UpdateGroup(namespace, name, group.update = NULL, ...)}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-UpdateGroupWithHttpInfo"></a>}}
\if{latex}{\out{\hypertarget{method-UpdateGroupWithHttpInfo}{}}}
\subsection{Method \code{UpdateGroupWithHttpInfo()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{GroupsApi$UpdateGroupWithHttpInfo(namespace, name, group.update = NULL, ...)}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-clone"></a>}}
\if{latex}{\out{\hypertarget{method-clone}{}}}
\subsection{Method \code{clone()}}{
The objects of this class are cloneable with this method.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{GroupsApi$clone(deep = FALSE)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{deep}}{Whether to make a deep clone.}
}
\if{html}{\out{</div>}}
}
}
}
