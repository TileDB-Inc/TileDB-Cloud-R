% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/udf_api.R
\docType{class}
\name{UdfApi}
\alias{UdfApi}
\title{Udf operations}
\format{
An \code{R6Class} generator object
}
\description{
tiledbcloud.Udf
}
\section{Methods}{

\describe{
\strong{ DeleteUDFInfo } \emph{  }
delete a registered UDF -- this will remove all sharing and can not be undone

\itemize{
\item \emph{ @param } namespace character
\item \emph{ @param } name character


\item status code : 202 | UDF delete successfully


\item response headers :

\tabular{ll}{
}
\item status code : 0 | error response

\item return type : Error 
\item response headers :

\tabular{ll}{
}
}

\strong{ GetUDFInfo } \emph{  }
get a specific UDF in the given namespace

\itemize{
\item \emph{ @param } namespace character
\item \emph{ @param } name character
\item \emph{ @returnType } \link{UDFInfo} \cr


\item status code : 200 | UDFInfo was retrieved successfully

\item return type : UDFInfo 
\item response headers :

\tabular{ll}{
}
\item status code : 404 | UDF not found


\item response headers :

\tabular{ll}{
}
\item status code : 0 | error response

\item return type : Error 
\item response headers :

\tabular{ll}{
}
}

\strong{ GetUDFInfoSharingPolicies } \emph{  }
Get all sharing details of the UDF

\itemize{
\item \emph{ @param } namespace character
\item \emph{ @param } name character
\item \emph{ @returnType } list( \link{UDFSharing} ) \cr


\item status code : 200 | List of all specific sharing policies

\item return type : array[UDFSharing] 
\item response headers :

\tabular{ll}{
}
\item status code : 404 | UDF does not exist or user does not have permissions to view array-sharing policies


\item response headers :

\tabular{ll}{
}
\item status code : 0 | error response

\item return type : Error 
\item response headers :

\tabular{ll}{
}
}

\strong{ RegisterUDFInfo } \emph{  }
register a UDF in the given namespace

\itemize{
\item \emph{ @param } namespace character
\item \emph{ @param } name character
\item \emph{ @param } udf \link{UDFInfoUpdate}


\item status code : 204 | UDF registered successfully


\item response headers :

\tabular{ll}{
}
\item status code : 0 | error response

\item return type : Error 
\item response headers :

\tabular{ll}{
}
}

\strong{ ShareUDFInfo } \emph{  }
Share a UDF with a user

\itemize{
\item \emph{ @param } namespace character
\item \emph{ @param } name character
\item \emph{ @param } udf.sharing \link{UDFSharing}


\item status code : 204 | UDF shared successfully


\item response headers :

\tabular{ll}{
}
\item status code : 404 | UDF does not exist or user does not have permissions to share UDF


\item response headers :

\tabular{ll}{
}
\item status code : 0 | error response

\item return type : Error 
\item response headers :

\tabular{ll}{
}
}

\strong{ SubmitGenericUDF } \emph{  }
submit a generic UDF in the given namespace

\itemize{
\item \emph{ @param } namespace character
\item \emph{ @param } udf \link{GenericUDF}
\item \emph{ @param } accept.encoding character


\item status code : 200 | UDF completed and the UDF-type specific result is returned

\item return type : data.frame 
\item response headers :

\tabular{ll}{
X-TILEDB-CLOUD-TASK-ID \tab Task ID for just completed request \cr
}
\item status code : 0 | error response

\item return type : Error 
\item response headers :

\tabular{ll}{
X-TILEDB-CLOUD-TASK-ID \tab Task ID for just completed request \cr
}
}

\strong{ SubmitMultiArrayUDF } \emph{  }
submit a multi-array UDF in the given namespace

\itemize{
\item \emph{ @param } namespace character
\item \emph{ @param } udf \link{MultiArrayUDF}
\item \emph{ @param } accept.encoding character


\item status code : 200 | UDF completed and the UDF-type specific result is returned

\item return type : data.frame 
\item response headers :

\tabular{ll}{
X-TILEDB-CLOUD-TASK-ID \tab Task ID for just completed request \cr
}
\item status code : 0 | error response

\item return type : Error 
\item response headers :

\tabular{ll}{
X-TILEDB-CLOUD-TASK-ID \tab Task ID for just completed request \cr
}
}

\strong{ SubmitUDF } \emph{  }
send a UDF to run against a specified array/URI registered to a group/project

\itemize{
\item \emph{ @param } namespace character
\item \emph{ @param } array character
\item \emph{ @param } udf \link{MultiArrayUDF}
\item \emph{ @param } x.payer character
\item \emph{ @param } accept.encoding character
\item \emph{ @param } v2 character


\item status code : 200 | UDF completed and the UDF-type specific result is returned

\item return type : data.frame 
\item response headers :

\tabular{ll}{
X-TILEDB-CLOUD-TASK-ID \tab Task ID for just completed request \cr
}
\item status code : 0 | error response

\item return type : Error 
\item response headers :

\tabular{ll}{
X-TILEDB-CLOUD-TASK-ID \tab Task ID for just completed request \cr
}
}

\strong{ UdfNamespaceArrayEndTimestampsGet } \emph{  }
retrieve a list of timestamps from the array fragment info listing in milliseconds, paginated

\itemize{
\item \emph{ @param } namespace character
\item \emph{ @param } array character
\item \emph{ @param } page integer
\item \emph{ @param } per.page integer
\item \emph{ @returnType } \link{ArrayEndTimestampData} \cr


\item status code : 200 | list of timestamps in milliseconds, paginated

\item return type : ArrayEndTimestampData 
\item response headers :

\tabular{ll}{
}
\item status code : 0 | error response

\item return type : Error 
\item response headers :

\tabular{ll}{
}
}

\strong{ UpdateUDFInfo } \emph{  }
update an existing registered UDF in the given namespace

\itemize{
\item \emph{ @param } namespace character
\item \emph{ @param } name character
\item \emph{ @param } udf \link{UDFInfoUpdate}


\item status code : 204 | UDF updated successfully


\item response headers :

\tabular{ll}{
}
\item status code : 0 | error response

\item return type : Error 
\item response headers :

\tabular{ll}{
}
}

}
}

\examples{
\dontrun{
####################  DeleteUDFInfo  ####################

library(tiledbcloud)
var.namespace <- 'namespace_example' # character | namespace array is in (an organization name or user's username)
var.name <- 'name_example' # character | name to register UDF under

api.instance <- UdfApi$new()

#Configure API key authorization: ApiKeyAuth
api.instance$apiClient$apiKeys['X-TILEDB-REST-API-KEY'] <- 'TODO_YOUR_API_KEY';

#Configure HTTP basic authorization: BasicAuth
# provide your username in the user-serial format
api.instance$apiClient$username <- '<user-serial>'; 
# provide your api key generated using the developer portal
api.instance$apiClient$password <- '<api_key>';

result <- api.instance$DeleteUDFInfo(var.namespace, var.name)


####################  GetUDFInfo  ####################

library(tiledbcloud)
var.namespace <- 'namespace_example' # character | namespace array is in (an organization name or user's username)
var.name <- 'name_example' # character | name to register UDF under

api.instance <- UdfApi$new()

#Configure API key authorization: ApiKeyAuth
api.instance$apiClient$apiKeys['X-TILEDB-REST-API-KEY'] <- 'TODO_YOUR_API_KEY';

#Configure HTTP basic authorization: BasicAuth
# provide your username in the user-serial format
api.instance$apiClient$username <- '<user-serial>'; 
# provide your api key generated using the developer portal
api.instance$apiClient$password <- '<api_key>';

result <- api.instance$GetUDFInfo(var.namespace, var.name)


####################  GetUDFInfoSharingPolicies  ####################

library(tiledbcloud)
var.namespace <- 'namespace_example' # character | namespace array is in (an organization name or user's username)
var.name <- 'name_example' # character | name of UDFInfo

api.instance <- UdfApi$new()

#Configure API key authorization: ApiKeyAuth
api.instance$apiClient$apiKeys['X-TILEDB-REST-API-KEY'] <- 'TODO_YOUR_API_KEY';

#Configure HTTP basic authorization: BasicAuth
# provide your username in the user-serial format
api.instance$apiClient$username <- '<user-serial>'; 
# provide your api key generated using the developer portal
api.instance$apiClient$password <- '<api_key>';

result <- api.instance$GetUDFInfoSharingPolicies(var.namespace, var.name)


####################  RegisterUDFInfo  ####################

library(tiledbcloud)
var.namespace <- 'namespace_example' # character | namespace array is in (an organization name or user's username)
var.name <- 'name_example' # character | name to register UDF under
var.udf <- UDFInfoUpdate$new() # UDFInfoUpdate | UDF to register

api.instance <- UdfApi$new()

#Configure API key authorization: ApiKeyAuth
api.instance$apiClient$apiKeys['X-TILEDB-REST-API-KEY'] <- 'TODO_YOUR_API_KEY';

#Configure HTTP basic authorization: BasicAuth
# provide your username in the user-serial format
api.instance$apiClient$username <- '<user-serial>'; 
# provide your api key generated using the developer portal
api.instance$apiClient$password <- '<api_key>';

result <- api.instance$RegisterUDFInfo(var.namespace, var.name, var.udf)


####################  ShareUDFInfo  ####################

library(tiledbcloud)
var.namespace <- 'namespace_example' # character | namespace array is in (an organization name or user's username)
var.name <- 'name_example' # character | name of UDFInfo
var.udf.sharing <- UDFSharing$new() # UDFSharing | Namespace and list of permissions to share with. An empty list of permissions will remove the namespace; if permissions already exist they will be deleted then new ones added. In the event of a failure, the new policies will be rolled back to prevent partial policies, and it's likely the UDF will not be shared with the namespace at all.

api.instance <- UdfApi$new()

#Configure API key authorization: ApiKeyAuth
api.instance$apiClient$apiKeys['X-TILEDB-REST-API-KEY'] <- 'TODO_YOUR_API_KEY';

#Configure HTTP basic authorization: BasicAuth
# provide your username in the user-serial format
api.instance$apiClient$username <- '<user-serial>'; 
# provide your api key generated using the developer portal
api.instance$apiClient$password <- '<api_key>';

result <- api.instance$ShareUDFInfo(var.namespace, var.name, var.udf.sharing)


####################  SubmitGenericUDF  ####################

library(tiledbcloud)
var.namespace <- 'namespace_example' # character | namespace array is in (an organization name or user's username)
var.udf <- GenericUDF$new() # GenericUDF | UDF to run
var.accept.encoding <- 'accept.encoding_example' # character | Encoding to use

api.instance <- UdfApi$new()

#Configure API key authorization: ApiKeyAuth
api.instance$apiClient$apiKeys['X-TILEDB-REST-API-KEY'] <- 'TODO_YOUR_API_KEY';

#Configure HTTP basic authorization: BasicAuth
# provide your username in the user-serial format
api.instance$apiClient$username <- '<user-serial>'; 
# provide your api key generated using the developer portal
api.instance$apiClient$password <- '<api_key>';

result <- api.instance$SubmitGenericUDF(var.namespace, var.udf, accept.encoding=var.accept.encoding)


####################  SubmitMultiArrayUDF  ####################

library(tiledbcloud)
var.namespace <- 'namespace_example' # character | namespace array is in (an organization name or user's username)
var.udf <- MultiArrayUDF$new() # MultiArrayUDF | UDF to run
var.accept.encoding <- 'accept.encoding_example' # character | Encoding to use

api.instance <- UdfApi$new()

#Configure API key authorization: ApiKeyAuth
api.instance$apiClient$apiKeys['X-TILEDB-REST-API-KEY'] <- 'TODO_YOUR_API_KEY';

#Configure HTTP basic authorization: BasicAuth
# provide your username in the user-serial format
api.instance$apiClient$username <- '<user-serial>'; 
# provide your api key generated using the developer portal
api.instance$apiClient$password <- '<api_key>';

result <- api.instance$SubmitMultiArrayUDF(var.namespace, var.udf, accept.encoding=var.accept.encoding)


####################  SubmitUDF  ####################

library(tiledbcloud)
var.namespace <- 'namespace_example' # character | namespace array is in (an organization name or user's username)
var.array <- 'array_example' # character | name/uri of array that is url-encoded
var.udf <- MultiArrayUDF$new() # MultiArrayUDF | UDF to run
var.x.payer <- 'x.payer_example' # character | Name of organization or user who should be charged for this request
var.accept.encoding <- 'accept.encoding_example' # character | Encoding to use
var.v2 <- 'v2_example' # character | flag to indicate if v2 array UDFs should be used, currently in beta testing. Setting any value will enable v2 array UDFs.

api.instance <- UdfApi$new()

#Configure API key authorization: ApiKeyAuth
api.instance$apiClient$apiKeys['X-TILEDB-REST-API-KEY'] <- 'TODO_YOUR_API_KEY';

#Configure HTTP basic authorization: BasicAuth
# provide your username in the user-serial format
api.instance$apiClient$username <- '<user-serial>'; 
# provide your api key generated using the developer portal
api.instance$apiClient$password <- '<api_key>';

result <- api.instance$SubmitUDF(var.namespace, var.array, var.udf, x.payer=var.x.payer, accept.encoding=var.accept.encoding, v2=var.v2)


####################  UdfNamespaceArrayEndTimestampsGet  ####################

library(tiledbcloud)
var.namespace <- 'namespace_example' # character | namespace array is in (an organization name or user's username)
var.array <- 'array_example' # character | name/uri of array that is url-encoded
var.page <- 56 # integer | pagination offset
var.per.page <- 56 # integer | pagination limit

api.instance <- UdfApi$new()

#Configure API key authorization: ApiKeyAuth
api.instance$apiClient$apiKeys['X-TILEDB-REST-API-KEY'] <- 'TODO_YOUR_API_KEY';

#Configure HTTP basic authorization: BasicAuth
# provide your username in the user-serial format
api.instance$apiClient$username <- '<user-serial>'; 
# provide your api key generated using the developer portal
api.instance$apiClient$password <- '<api_key>';

result <- api.instance$UdfNamespaceArrayEndTimestampsGet(var.namespace, var.array, page=var.page, per.page=var.per.page)


####################  UpdateUDFInfo  ####################

library(tiledbcloud)
var.namespace <- 'namespace_example' # character | namespace array is in (an organization name or user's username)
var.name <- 'name_example' # character | name to register UDF under
var.udf <- UDFInfoUpdate$new() # UDFInfoUpdate | UDF to update

api.instance <- UdfApi$new()

#Configure API key authorization: ApiKeyAuth
api.instance$apiClient$apiKeys['X-TILEDB-REST-API-KEY'] <- 'TODO_YOUR_API_KEY';

#Configure HTTP basic authorization: BasicAuth
# provide your username in the user-serial format
api.instance$apiClient$username <- '<user-serial>'; 
# provide your api key generated using the developer portal
api.instance$apiClient$password <- '<api_key>';

result <- api.instance$UpdateUDFInfo(var.namespace, var.name, var.udf)


}
}
\section{Public fields}{
\if{html}{\out{<div class="r6-fields">}}
\describe{
\item{\code{apiClient}}{Handles the client-server communication.}
}
\if{html}{\out{</div>}}
}
\section{Methods}{
\subsection{Public methods}{
\itemize{
\item \href{#method-new}{\code{UdfApi$new()}}
\item \href{#method-DeleteUDFInfo}{\code{UdfApi$DeleteUDFInfo()}}
\item \href{#method-DeleteUDFInfoWithHttpInfo}{\code{UdfApi$DeleteUDFInfoWithHttpInfo()}}
\item \href{#method-GetUDFInfo}{\code{UdfApi$GetUDFInfo()}}
\item \href{#method-GetUDFInfoWithHttpInfo}{\code{UdfApi$GetUDFInfoWithHttpInfo()}}
\item \href{#method-GetUDFInfoSharingPolicies}{\code{UdfApi$GetUDFInfoSharingPolicies()}}
\item \href{#method-GetUDFInfoSharingPoliciesWithHttpInfo}{\code{UdfApi$GetUDFInfoSharingPoliciesWithHttpInfo()}}
\item \href{#method-RegisterUDFInfo}{\code{UdfApi$RegisterUDFInfo()}}
\item \href{#method-RegisterUDFInfoWithHttpInfo}{\code{UdfApi$RegisterUDFInfoWithHttpInfo()}}
\item \href{#method-ShareUDFInfo}{\code{UdfApi$ShareUDFInfo()}}
\item \href{#method-ShareUDFInfoWithHttpInfo}{\code{UdfApi$ShareUDFInfoWithHttpInfo()}}
\item \href{#method-SubmitGenericUDF}{\code{UdfApi$SubmitGenericUDF()}}
\item \href{#method-SubmitGenericUDFWithHttpInfo}{\code{UdfApi$SubmitGenericUDFWithHttpInfo()}}
\item \href{#method-SubmitMultiArrayUDF}{\code{UdfApi$SubmitMultiArrayUDF()}}
\item \href{#method-SubmitMultiArrayUDFWithHttpInfo}{\code{UdfApi$SubmitMultiArrayUDFWithHttpInfo()}}
\item \href{#method-SubmitUDF}{\code{UdfApi$SubmitUDF()}}
\item \href{#method-SubmitUDFWithHttpInfo}{\code{UdfApi$SubmitUDFWithHttpInfo()}}
\item \href{#method-UdfNamespaceArrayEndTimestampsGet}{\code{UdfApi$UdfNamespaceArrayEndTimestampsGet()}}
\item \href{#method-UdfNamespaceArrayEndTimestampsGetWithHttpInfo}{\code{UdfApi$UdfNamespaceArrayEndTimestampsGetWithHttpInfo()}}
\item \href{#method-UpdateUDFInfo}{\code{UdfApi$UpdateUDFInfo()}}
\item \href{#method-UpdateUDFInfoWithHttpInfo}{\code{UdfApi$UpdateUDFInfoWithHttpInfo()}}
\item \href{#method-clone}{\code{UdfApi$clone()}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-new"></a>}}
\if{latex}{\out{\hypertarget{method-new}{}}}
\subsection{Method \code{new()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{UdfApi$new(apiClient)}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-DeleteUDFInfo"></a>}}
\if{latex}{\out{\hypertarget{method-DeleteUDFInfo}{}}}
\subsection{Method \code{DeleteUDFInfo()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{UdfApi$DeleteUDFInfo(namespace, name, ...)}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-DeleteUDFInfoWithHttpInfo"></a>}}
\if{latex}{\out{\hypertarget{method-DeleteUDFInfoWithHttpInfo}{}}}
\subsection{Method \code{DeleteUDFInfoWithHttpInfo()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{UdfApi$DeleteUDFInfoWithHttpInfo(namespace, name, ...)}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-GetUDFInfo"></a>}}
\if{latex}{\out{\hypertarget{method-GetUDFInfo}{}}}
\subsection{Method \code{GetUDFInfo()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{UdfApi$GetUDFInfo(namespace, name, ...)}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-GetUDFInfoWithHttpInfo"></a>}}
\if{latex}{\out{\hypertarget{method-GetUDFInfoWithHttpInfo}{}}}
\subsection{Method \code{GetUDFInfoWithHttpInfo()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{UdfApi$GetUDFInfoWithHttpInfo(namespace, name, ...)}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-GetUDFInfoSharingPolicies"></a>}}
\if{latex}{\out{\hypertarget{method-GetUDFInfoSharingPolicies}{}}}
\subsection{Method \code{GetUDFInfoSharingPolicies()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{UdfApi$GetUDFInfoSharingPolicies(namespace, name, ...)}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-GetUDFInfoSharingPoliciesWithHttpInfo"></a>}}
\if{latex}{\out{\hypertarget{method-GetUDFInfoSharingPoliciesWithHttpInfo}{}}}
\subsection{Method \code{GetUDFInfoSharingPoliciesWithHttpInfo()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{UdfApi$GetUDFInfoSharingPoliciesWithHttpInfo(namespace, name, ...)}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-RegisterUDFInfo"></a>}}
\if{latex}{\out{\hypertarget{method-RegisterUDFInfo}{}}}
\subsection{Method \code{RegisterUDFInfo()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{UdfApi$RegisterUDFInfo(namespace, name, udf, ...)}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-RegisterUDFInfoWithHttpInfo"></a>}}
\if{latex}{\out{\hypertarget{method-RegisterUDFInfoWithHttpInfo}{}}}
\subsection{Method \code{RegisterUDFInfoWithHttpInfo()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{UdfApi$RegisterUDFInfoWithHttpInfo(namespace, name, udf, ...)}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-ShareUDFInfo"></a>}}
\if{latex}{\out{\hypertarget{method-ShareUDFInfo}{}}}
\subsection{Method \code{ShareUDFInfo()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{UdfApi$ShareUDFInfo(namespace, name, udf.sharing, ...)}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-ShareUDFInfoWithHttpInfo"></a>}}
\if{latex}{\out{\hypertarget{method-ShareUDFInfoWithHttpInfo}{}}}
\subsection{Method \code{ShareUDFInfoWithHttpInfo()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{UdfApi$ShareUDFInfoWithHttpInfo(namespace, name, udf.sharing, ...)}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-SubmitGenericUDF"></a>}}
\if{latex}{\out{\hypertarget{method-SubmitGenericUDF}{}}}
\subsection{Method \code{SubmitGenericUDF()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{UdfApi$SubmitGenericUDF(namespace, udf, accept.encoding = NULL, ...)}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-SubmitGenericUDFWithHttpInfo"></a>}}
\if{latex}{\out{\hypertarget{method-SubmitGenericUDFWithHttpInfo}{}}}
\subsection{Method \code{SubmitGenericUDFWithHttpInfo()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{UdfApi$SubmitGenericUDFWithHttpInfo(
  namespace,
  udf,
  accept.encoding = NULL,
  ...
)}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-SubmitMultiArrayUDF"></a>}}
\if{latex}{\out{\hypertarget{method-SubmitMultiArrayUDF}{}}}
\subsection{Method \code{SubmitMultiArrayUDF()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{UdfApi$SubmitMultiArrayUDF(namespace, udf, accept.encoding = NULL, ...)}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-SubmitMultiArrayUDFWithHttpInfo"></a>}}
\if{latex}{\out{\hypertarget{method-SubmitMultiArrayUDFWithHttpInfo}{}}}
\subsection{Method \code{SubmitMultiArrayUDFWithHttpInfo()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{UdfApi$SubmitMultiArrayUDFWithHttpInfo(
  namespace,
  udf,
  accept.encoding = NULL,
  ...
)}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-SubmitUDF"></a>}}
\if{latex}{\out{\hypertarget{method-SubmitUDF}{}}}
\subsection{Method \code{SubmitUDF()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{UdfApi$SubmitUDF(
  namespace,
  array,
  udf,
  x.payer = NULL,
  accept.encoding = NULL,
  v2 = NULL,
  ...
)}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-SubmitUDFWithHttpInfo"></a>}}
\if{latex}{\out{\hypertarget{method-SubmitUDFWithHttpInfo}{}}}
\subsection{Method \code{SubmitUDFWithHttpInfo()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{UdfApi$SubmitUDFWithHttpInfo(
  namespace,
  array,
  udf,
  x.payer = NULL,
  accept.encoding = NULL,
  v2 = NULL,
  ...
)}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-UdfNamespaceArrayEndTimestampsGet"></a>}}
\if{latex}{\out{\hypertarget{method-UdfNamespaceArrayEndTimestampsGet}{}}}
\subsection{Method \code{UdfNamespaceArrayEndTimestampsGet()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{UdfApi$UdfNamespaceArrayEndTimestampsGet(
  namespace,
  array,
  page = NULL,
  per.page = NULL,
  ...
)}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-UdfNamespaceArrayEndTimestampsGetWithHttpInfo"></a>}}
\if{latex}{\out{\hypertarget{method-UdfNamespaceArrayEndTimestampsGetWithHttpInfo}{}}}
\subsection{Method \code{UdfNamespaceArrayEndTimestampsGetWithHttpInfo()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{UdfApi$UdfNamespaceArrayEndTimestampsGetWithHttpInfo(
  namespace,
  array,
  page = NULL,
  per.page = NULL,
  ...
)}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-UpdateUDFInfo"></a>}}
\if{latex}{\out{\hypertarget{method-UpdateUDFInfo}{}}}
\subsection{Method \code{UpdateUDFInfo()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{UdfApi$UpdateUDFInfo(namespace, name, udf, ...)}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-UpdateUDFInfoWithHttpInfo"></a>}}
\if{latex}{\out{\hypertarget{method-UpdateUDFInfoWithHttpInfo}{}}}
\subsection{Method \code{UpdateUDFInfoWithHttpInfo()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{UdfApi$UpdateUDFInfoWithHttpInfo(namespace, name, udf, ...)}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-clone"></a>}}
\if{latex}{\out{\hypertarget{method-clone}{}}}
\subsection{Method \code{clone()}}{
The objects of this class are cloneable with this method.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{UdfApi$clone(deep = FALSE)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{deep}}{Whether to make a deep clone.}
}
\if{html}{\out{</div>}}
}
}
}
